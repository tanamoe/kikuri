/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/aboutus/category": {
    /** add a category */
    post: operations["addAboutusCategory"];
  };
  "/aboutus/category/{category_id}": {
    /** returns a single category */
    get: operations["retrieveAboutusCategory"];
    /** remove a category */
    delete: operations["deleteAboutusCategory"];
    /** update a category */
    patch: operations["updateAboutusCategory"];
  };
  "/aboutus/users": {
    /** returns categories and users */
    get: operations["retrieveAboutusCategoriesAndUsers"];
  };
  "/aboutus": {
    /** returns description of site */
    get: operations["retrieveAboutusDescription"];
    /** update description of site */
    post: operations["updateAboutusDescription"];
  };
  "/aboutus/reorder": {
    /** reorder aboutus */
    post: operations["reorderAboutus"];
  };
  "/aboutus/category/{category_id}/users": {
    /** add a user to a category */
    post: operations["addAboutusCategoryUser"];
  };
  "/aboutus/category/{category_id}/users/{entry_id}": {
    /** remove a user from a category */
    delete: operations["deleteAboutusCategoryUser"];
  };
  "/account/captcha": {
    /** retrieve the public captcha key */
    get: operations["captcha"];
  };
  "/account/delete/confirm/{auth_hash}": {
    /** confirm deletion of your account */
    post: operations["confirmDeleteAccount"];
  };
  "/account/delete/{captcha_response}": {
    /** delete your account */
    post: operations["deleteAccount"];
  };
  "/account/forgotpass/confirm/{auth_hash}": {
    /** update a password change using an auth hash */
    post: operations["confirmAndChangePassword"];
  };
  "/account/forgotpass/{captcha_response}": {
    /** send a forgotten password email */
    post: operations["forgotPassword"];
  };
  "/account/login": {
    /** create a session token */
    put: operations["login"];
  };
  "/account/logout": {
    /** remove a session token */
    post: operations["logout"];
  };
  "/account/profile": {
    /** get the profile for the current user */
    get: operations["profile"];
  };
  "/account/register/confirm/{auth_hash}": {
    /** confirm a new member registration */
    post: operations["confirmRegistration"];
  };
  "/account/register/{captcha_response}": {
    /** register a new member */
    post: operations["registerMember"];
  };
  "/account/resendauth/{id}": {
    /** send an auth email to a user */
    post: operations["resendAuthEmail"];
  };
  "/account/sendforgot/{id}": {
    /** send a forgotten password email to a user */
    post: operations["sendForgotEmail"];
  };
  "/authors": {
    /** add an author */
    post: operations["addAuthor"];
  };
  "/authors/{id}": {
    /** get a specific author */
    get: operations["retrieveAuthor"];
    /** delete an author */
    delete: operations["deleteAuthor"];
    /** update an author */
    patch: operations["updateAuthor"];
  };
  "/authors/{id}/locks": {
    /** get locks for a specific author */
    get: operations["retrieveAuthorLocks"];
  };
  "/authors/{id}/locks/{item}/lock": {
    /** lock a field of an author */
    post: operations["lockAuthorField"];
  };
  "/authors/{id}/locks/{item}/unlock": {
    /** unlock a field of an author */
    post: operations["unlockAuthorField"];
  };
  "/authors/search": {
    /** search authors */
    post: operations["searchAuthorsPost"];
  };
  "/authors/{id}/series": {
    /** get the list of series for a specific author */
    post: operations["retrieveAuthorSeries"];
  };
  "/authors/{id}/image": {
    /** update the image of an author */
    post: operations["updateImage"];
    /** delete the image of an author */
    delete: operations["deleteImage"];
  };
  "/categories/bulk/combine": {
    /** combine two categories across the database */
    post: operations["bulkCombineSeriesCategories"];
  };
  "/categories/bulk/delete": {
    /** delete a category across the database */
    post: operations["bulkDeleteSeriesCategories"];
  };
  "/categories/findByPrefix": {
    /** find a category by prefix */
    post: operations["findCategoryByPrefix"];
  };
  "/categories/findByExact": {
    /** find a category by name */
    post: operations["findCategoryByExact"];
  };
  "/categories/search": {
    /** search categories */
    post: operations["searchCategoriesPost"];
  };
  "/convo": {
    /** add an convo */
    post: operations["addConvo"];
  };
  "/convo/bulk/abandon": {
    /** abandon convos in bulk */
    post: operations["abandonConvoBulk"];
  };
  "/convo/bulk/delete": {
    /** delete convos in bulk */
    post: operations["deleteConvoBulk"];
  };
  "/convo/{id}": {
    /** get a specific convo */
    get: operations["retrieveConvo"];
    /** delete a convo */
    delete: operations["deleteConvo"];
    /** update a convo */
    patch: operations["updateConvo"];
  };
  "/convo/ignore/{user_id}": {
    /** return whether the user is ignored */
    get: operations["isUserIgnored"];
    /** ignore a user */
    post: operations["ignoreUser"];
    /** remove ignore for a user */
    delete: operations["unIgnoreUser"];
  };
  "/convo/inbox": {
    /** display unread messages */
    get: operations["convoInbox"];
  };
  "/convo/inbox/count": {
    /** retrieve number of unread messages */
    get: operations["convoInboxCount"];
  };
  "/convo/sent": {
    /** display sent messages */
    post: operations["convoSent"];
  };
  "/convo/received": {
    /** display received (and read) messages */
    post: operations["convoReceived"];
  };
  "/convo/{id}/messages": {
    /** add a message to a convo */
    post: operations["addConvoMessage"];
  };
  "/convo/{id}/messages/list": {
    /** list convo messages */
    post: operations["listConvoMessages"];
  };
  "/convo/{id}/messages/{message_id}": {
    /** get a specific convo message */
    get: operations["retrieveConvoMessage"];
    /** update a convo message */
    patch: operations["updateConvoMessage"];
  };
  "/convo/{id}/messages/{message_id}/location": {
    /** get a specific convo message location */
    get: operations["retrieveConvoMessageLocation"];
  };
  "/convo/{id}/messages/search": {
    /** search convo */
    post: operations["searchConvoMessagesPost"];
  };
  "/convo/{id}/abandon": {
    /** abandon a convo */
    post: operations["abandonConvo"];
  };
  "/convo/{id}/invite": {
    /** invite a user to a convo */
    post: operations["inviteUserToConvo"];
  };
  "/convo/{id}/join": {
    /** join a convo */
    post: operations["joinConvo"];
  };
  "/convo/{id}/kick/{user_id}": {
    /** kick a user from a convo */
    post: operations["kickUserFromConvo"];
  };
  "/convo/{id}/participants": {
    /** get list of convo participants */
    get: operations["retrieveConvoParticipants"];
  };
  "/convo/search": {
    /** search convo */
    post: operations["searchConvoPost"];
  };
  "/faq": {
    /** retrieve all categories and questions */
    get: operations["retrieveAllFaqCategoriesAndQuestions"];
    /** add a faq category */
    post: operations["addFaqCategory"];
  };
  "/faq/{category_id}": {
    /** get a specific category */
    get: operations["retrieveFaqCategory"];
    /** delete a faq category */
    delete: operations["deleteFaqCategory"];
    /** update a faq category */
    patch: operations["updateFaqCategory"];
  };
  "/faq/{category_id}/questions": {
    /** retrieve all quesitons for a category */
    get: operations["retrieveAllFaqCategoryQuestions"];
    /** add a faq question */
    post: operations["addFaqQuestion"];
  };
  "/faq/{category_id}/questions/{question_id}": {
    /** get a specific question for a category */
    get: operations["retrieveFaqQuestion"];
    /** delete an faq */
    delete: operations["deleteFaqQuestion"];
    /** update a faq question */
    patch: operations["updateFaqQuestion"];
  };
  "/faq/reorder": {
    /** reorder faq */
    post: operations["reorderFaq"];
  };
  "/forums/{forum_id}/admins/{user_id}": {
    /** add a forum admin */
    put: operations["addForumAdmin"];
    /** remove a forum admin */
    delete: operations["removeForumAdmin"];
  };
  "/forums/{forum_id}": {
    /** retrieve a forum */
    get: operations["retrieveForum"];
    /** add a forum topic */
    post: operations["addTopic"];
  };
  "/forums/log": {
    /** show forum admin log */
    post: operations["showLogPost"];
  };
  "/forums": {
    /** show forum categories and forums */
    get: operations["listCategories"];
  };
  "/forums/popular": {
    /** show popular forums */
    get: operations["listPopularForums"];
  };
  "/forums/{forum_id}/topics/{topic_id}/my_posts": {
    /** list posts in topic that I made */
    get: operations["listPostsByMe"];
  };
  "/forums/{forum_id}/topics/{topic_id}/list": {
    /** list posts in topic */
    post: operations["listPosts"];
  };
  "/forums/{forum_id}/list": {
    /** list topics */
    post: operations["listTopics"];
  };
  "/forums/global": {
    /** list global topics */
    get: operations["listGlobalTopics"];
  };
  "/forums/lookup/series/{series_id}": {
    /** lookup a series to find the forum id */
    get: operations["lookupSeries"];
  };
  "/forums/lookup/topic/{topic_id}": {
    /** lookup a topic to find the forum id */
    get: operations["lookupTopic"];
  };
  "/forums/lookup/post/{post_id}": {
    /** lookup a post to find the forum and topic id */
    get: operations["lookupPost"];
  };
  "/forums/temp_poll_images": {
    /** retrieve temporary poll images */
    get: operations["retrieveTemporaryPollImages"];
    /** add a temporary poll image */
    post: operations["addTemporaryPollImage"];
  };
  "/forums/{forum_id}/topics/{topic_id}/poll": {
    /** update a forum topic poll (if present) */
    patch: operations["updateTopicPoll"];
  };
  "/forums/{forum_id}/topics/{topic_id}/poll/vote/{choice_id}": {
    /** add a vote to a forum poll */
    post: operations["addPollVote"];
  };
  "/forums/{forum_id}/topics/{topic_id}/poll/vote": {
    /** retrieve my vote from the poll */
    get: operations["retrieveVote"];
  };
  "/forums/{forum_id}/topics/{topic_id}": {
    /** retrieve a forum topic */
    get: operations["retrieveTopic"];
    /** add a forum post */
    post: operations["addPost"];
    /** delete a topic */
    delete: operations["deleteTopic"];
    /** update a forum topic */
    patch: operations["updateTopic"];
  };
  "/forums/{forum_id}/topics/{topic_id}/posts/{post_id}": {
    /** retrieve a forum post */
    get: operations["retrievePost"];
    /** delete a post */
    delete: operations["deletePost"];
    /** update a forum post */
    patch: operations["updatePost"];
  };
  "/forums/{forum_id}/topics/{topic_id}/posts/{post_id}/report": {
    /** report a forum post */
    post: operations["reportPost"];
    /** delete a post report */
    delete: operations["deletePostReport"];
  };
  "/forums/report": {
    /** show reported posts */
    get: operations["listReportedPosts"];
  };
  "/forums/{forum_id}/topics/{topic_id}/posts/{post_id}/location": {
    /** retrieve a forum post location within topic */
    get: operations["retrievePostLocation"];
  };
  "/forums/search": {
    /** search forum */
    post: operations["searchForumPost"];
  };
  "/forums/{forum_id}/search": {
    /** search specific forum */
    post: operations["searchSpecificForumPost"];
  };
  "/forums/{forum_id}/topics/{topic_id}/search": {
    /** search specific topic */
    post: operations["searchSpecificTopicPost"];
  };
  "/forums/warn/{user_id}/history": {
    /** show warn history for a user */
    get: operations["listWarnHistoryForUser"];
  };
  "/forums/warn/{user_id}": {
    /** gets the current warn status for user */
    get: operations["getCurrentWarnForUser"];
    /** update a user warn level */
    put: operations["updateUserWarnLevel"];
  };
  "/genres": {
    /** get genres */
    get: operations["retrieveGenres"];
    /** add a genre */
    post: operations["addGenre"];
  };
  "/genres/{id}": {
    /** get genres */
    get: operations["retrieveGenreById"];
    /** delete a genre */
    delete: operations["deleteGenre"];
    /** update a genre */
    patch: operations["updateGenre"];
  };
  "/groups": {
    /** add an group */
    post: operations["addGroup"];
  };
  "/groups/{id}": {
    /** get a specific group */
    get: operations["retrieveGroup"];
    /** delete a group */
    delete: operations["deleteGroup"];
    /** update an group */
    patch: operations["updateGroup"];
  };
  "/groups/{id}/reject": {
    /** reject and delete a group */
    post: operations["rejectGroup"];
  };
  "/groups/search": {
    /** search groups */
    post: operations["searchGroupsPost"];
  };
  "/groups/{id}/series": {
    /** get the list of series and release frequency for a specific group */
    get: operations["retrieveGroupSeries"];
  };
  "/lists": {
    /** retrieve list of user lists */
    get: operations["retrieveLists"];
    /** add a custom user list */
    post: operations["addCustomList"];
  };
  "/lists/{id}": {
    /** retrieve list metadata and options */
    get: operations["retrieveListById"];
    /** remove a custom list */
    delete: operations["deleteCustomList"];
    /** update a user list */
    patch: operations["updateList"];
  };
  "/lists/public/{user_id}": {
    /** retrieve list of user lists */
    get: operations["retrievePublicLists"];
  };
  "/lists/public/{user_id}/stats": {
    /** retrieve stats for user public lists */
    get: operations["retrievePublicListStats"];
  };
  "/lists/public/{user_id}/search/{id}": {
    /** search lists */
    post: operations["searchPublicListsPost"];
  };
  "/lists/{id}/search": {
    /** search lists */
    post: operations["searchListsPost"];
  };
  "/lists/series": {
    /** add a series to a list */
    post: operations["addListSeries"];
  };
  "/lists/{id}/series/bulk": {
    /** add a list of series to a list */
    post: operations["addListSeriesBulk"];
  };
  "/lists/series/delete": {
    /** remove a series from a list */
    post: operations["deleteListSeries"];
  };
  "/lists/series/{series_id}": {
    /** retrieve list series item */
    get: operations["retrieveListSeries"];
  };
  "/lists/series/update": {
    /** update a series list item */
    post: operations["updateListSeries"];
  };
  "/lists/similar/{list_name}/{series_id}": {
    /** retrieve users who have similar interests based on series */
    get: operations["retrieveSimilarUsersBySeries"];
  };
  "/misc/time": {
    /** get the current time */
    get: operations["time"];
  };
  "/misc/online": {
    /** list online users */
    get: operations["listOnlineUsers"];
  };
  "/misc/slow-transaction-status/{transaction_id}": {
    /** get the status of a bulk transaction */
    get: operations["retrieveSlowTransactionStatus"];
  };
  "/misc/stats": {
    /** show various site stats */
    get: operations["siteStats"];
  };
  "/poll": {
    /** get the active poll */
    get: operations["retrievePoll"];
    /** add a new poll */
    post: operations["addPoll"];
    /** archive the active poll */
    delete: operations["archivePoll"];
  };
  "/poll/old": {
    /** get old polls */
    get: operations["retrieveOldPolls"];
  };
  "/poll/vote": {
    /** vote in a poll */
    post: operations["votePollNoAnswer"];
  };
  "/poll/vote/{answer_id}": {
    /** vote in a poll answer */
    post: operations["votePollAnswer"];
  };
  "/poll/vote/status": {
    /** get information about whether the user has voted */
    get: operations["retrieveVoteStatus"];
  };
  "/publishers": {
    /** add an publisher */
    post: operations["addPublisher"];
  };
  "/publishers/{id}": {
    /** get a specific publisher */
    get: operations["retrievePublisher"];
    /** delete a publisher */
    delete: operations["deletePublisher"];
    /** update a publisher */
    patch: operations["updatePublisher"];
  };
  "/publishers/search": {
    /** search publishers */
    post: operations["searchPublishersPost"];
  };
  "/publishers/{id}/series": {
    /** get the list of series for a specific publisher */
    get: operations["retrievePublisherSeries"];
  };
  "/publishers/publication": {
    /** get the list of series for a specific publication */
    get: operations["retrievePublicationSeries"];
  };
  "/releases": {
    /** add an release */
    post: operations["addRelease"];
  };
  "/releases/{id}": {
    /** get a specific release */
    get: operations["retrieveRelease"];
    /** delete a release */
    delete: operations["deleteRelease"];
    /** update an release */
    patch: operations["updateRelease"];
  };
  "/releases/moderate": {
    /** search releases to moderate */
    post: operations["moderateReleasesPost"];
  };
  "/releases/days": {
    /** show releases by day */
    get: operations["listReleasesByDay"];
  };
  "/releases/rss": {
    /** releases rss feed */
    get: operations["releaseRssFeed"];
  };
  "/releases/search": {
    /** search releases */
    post: operations["searchReleasesPost"];
  };
  "/reviews": {
    /** add a review */
    post: operations["addReview"];
  };
  "/reviews/{id}/comments": {
    /** add a review comment */
    post: operations["addReviewComment"];
  };
  "/reviews/{id}/comments/{comment_id}": {
    /** get a specific review comment */
    get: operations["retrieveReviewComment"];
    /** delete a review comment */
    delete: operations["deleteReviewComment"];
    /** update a review comment */
    patch: operations["updateReviewComment"];
  };
  "/reviews/comments/moderation": {
    /** moderate review comments */
    post: operations["reviewCommentsModerationPost"];
  };
  "/reviews/{id}/comments/search": {
    /** search review comments */
    post: operations["searchReviewCommentsPost"];
  };
  "/reviews/{id}": {
    /** get a specific review */
    get: operations["retrieveReview"];
    /** delete a review */
    delete: operations["deleteReview"];
    /** update a review */
    patch: operations["updateReview"];
  };
  "/reviews/search": {
    /** search reviews */
    post: operations["searchReviewsPost"];
  };
  "/series": {
    /** add an series */
    post: operations["addSeries"];
  };
  "/series/{id}/categories/combine": {
    /** combine two series categories */
    post: operations["combineSeriesCategories"];
  };
  "/series/{id}/categories/delete": {
    /** deletes a series category */
    post: operations["deleteSeriesCategory"];
  };
  "/series/{id}/categories/rename": {
    /** renames a series category */
    post: operations["renameSeriesCategory"];
  };
  "/series/{id}/categories/votes": {
    /** get category votes for the current user */
    get: operations["retrieveSeriesCategoryVotes"];
  };
  "/series/{id}/categories/vote": {
    /** add a vote for a category on a series */
    post: operations["addSeriesCategoryVote"];
  };
  "/series/{id}/categories/vote/delete": {
    /** remove series category vote for user */
    post: operations["removeSeriesCategoryVote"];
  };
  "/series/{id}/comments": {
    /** add a series comment */
    post: operations["addSeriesComment"];
  };
  "/series/{id}/comments/{comment_id}": {
    /** get a specific series comment */
    get: operations["retrieveSeriesComment"];
    /** delete a series comment */
    delete: operations["deleteSeriesComment"];
    /** update a series comment */
    patch: operations["updateSeriesComment"];
  };
  "/series/comments/moderation": {
    /** moderate series comments */
    post: operations["seriesCommentsModerationPost"];
  };
  "/series/{id}/comments/{comment_id}/report": {
    /** report a series comment */
    post: operations["reportSeriesComment"];
  };
  "/series/{id}/comments/my_comment": {
    /** get my series comment */
    get: operations["retrieveMySeriesComment"];
  };
  "/series/{id}/comments/{comment_id}/location": {
    /** get a specific series comment location */
    get: operations["retrieveSeriesCommentLocation"];
  };
  "/series/{id}/comments/search": {
    /** search series comments */
    post: operations["searchSeriesCommentsPost"];
  };
  "/series/{id}/comments/{comment_id}/useful": {
    /** set usefulness of a series comment */
    put: operations["addSeriesCommentUsefulFlag"];
    /** remove usefulness of a series comment */
    delete: operations["removeSeriesCommentUsefulFlag"];
  };
  "/series/{id}": {
    /** get a specific series */
    get: operations["retrieveSeries"];
    /** delete a series */
    delete: operations["deleteSeries"];
    /** update an series */
    patch: operations["updateSeries"];
  };
  "/series/{id}/groups": {
    /** get the list of groups scanlating a specific series */
    get: operations["retrieveSeriesGroups"];
  };
  "/series/{id}/history": {
    /** search series history */
    post: operations["searchSeriesHistoryPost"];
  };
  "/series/{id}/locks": {
    /** get a specific series lock */
    get: operations["retrieveSeriesLocks"];
  };
  "/series/{id}/locks/{item}/lock": {
    /** lock a field of an series */
    post: operations["lockSeriesField"];
  };
  "/series/{id}/locks/{item}/unlock": {
    /** unlock a field of an series */
    post: operations["unlockSeriesField"];
  };
  "/series/{id}/rank/{type}": {
    /** get a specific series rank location */
    get: operations["retrieveSeriesRankLocation"];
  };
  "/series/{id}/rating": {
    /** get a specific series rating for a user */
    get: operations["retrieveUserSeriesRating"];
    /** update the user rating for a series */
    put: operations["updateUserSeriesRating"];
    /** delete a series rating for a user */
    delete: operations["deleteUserSeriesRating"];
  };
  "/series/{id}/ratingrainbow": {
    /** get a the series rating rainbow */
    get: operations["retrieveSeriesRatingRainbow"];
  };
  "/series/{id}/rss": {
    /** releases rss feed for a specific series */
    get: operations["seriesReleaseRssFeed"];
  };
  "/series/search": {
    /** search series */
    post: operations["searchSeriesPost"];
  };
  "/series/{id}/image": {
    /** update the image of an series */
    post: operations["updateSeriesImage"];
    /** delete the image of an series */
    delete: operations["deleteSeriesImage"];
  };
  "/membergroups/{id}": {
    /** get user group */
    get: operations["retrieveUserGroupById"];
    /** add or update a user group */
    put: operations["addOrUpdateUserGroup"];
    /** delete a user group */
    delete: operations["deleteUserGroup"];
  };
  "/membergroups": {
    /** get user groups */
    get: operations["retrieveUserGroups"];
  };
  "/members": {
    /** add a member */
    post: operations["addMember"];
  };
  "/members/{id}/requests": {
    /** search change requests for a specific user */
    get: operations["searchMemberChangeRequests"];
    /** add a change request */
    post: operations["addMemberChangeRequest"];
  };
  "/members/{id}/requests/{request_id}": {
    /** get change requests for a specific user */
    get: operations["retrieveMemberChangeRequest"];
    /** add a change request */
    delete: operations["deleteMemberChangeRequest"];
    /** update a change request */
    patch: operations["updateMemberChangeRequest"];
  };
  "/members/{id}": {
    /** get a specific members */
    get: operations["retrieveMember"];
    /** delete a member */
    delete: operations["deleteMember"];
    /** update a member */
    patch: operations["updateMember"];
  };
  "/members/{id}/genre/filters": {
    /** get genre filters for a specific user */
    get: operations["retrieveMemberGenreFilters"];
  };
  "/members/{id}/genre/{genre_id}/filter": {
    /** filter a genre for a user */
    post: operations["addMemberGenreFilter"];
    /** remove a filter for a genre for a user */
    delete: operations["removeMemberGenreFilter"];
  };
  "/members/{id}/genre/highlights": {
    /** get highlights for a specific user */
    get: operations["retrieveMemberGenreHighlights"];
  };
  "/members/{id}/genre/{genre_id}/highlight": {
    /** highlight a genre for a user */
    post: operations["addMemberGenreHighlight"];
    /** remove a highlight for a genre for a user */
    delete: operations["removeMemberGenreHighlight"];
  };
  "/members/{id}/genre/reset": {
    /** reset genre highlights and filters for a user */
    post: operations["resetGenreSettings"];
  };
  "/members/{id}/group/filters": {
    /** get group filters for a specific user */
    get: operations["retrieveMemberGroupFilters"];
  };
  "/members/{id}/group/{group_id}/filter": {
    /** filter a group for a user */
    post: operations["addUserGroupFilter"];
    /** remove a filter for a group for a user */
    delete: operations["removeUserGroupFilter"];
  };
  "/members/{id}/avatars": {
    /** get avatars for a specific user */
    get: operations["retrieveMemberAvatars"];
  };
  "/members/search": {
    /** search members */
    post: operations["searchMembersPost"];
  };
  "/members/{id}/topics": {
    /** get topic subscriptions for a specific user */
    get: operations["retrieveMemberTopicSubscriptions"];
  };
  "/members/{id}/topics/{topic_id}": {
    /** get a subscription to a specific topic for a user */
    get: operations["retrieveMemberTopicSubscription"];
    /** add a topic subscription for a user */
    post: operations["addUserTopicSubscription"];
    /** remove a topic subscription for a user */
    delete: operations["removeUserTopicSubscription"];
  };
  "/members/{id}/avatar": {
    /** add a new member avatar */
    post: operations["addMemberAvatar"];
  };
  "/members/{id}/avatar/{avatar_id}": {
    /** delete a member avatar */
    delete: operations["deleteMemberAvatar"];
  };
  "/members/{id}/upgrade/approve": {
    /** upgrade a member */
    post: operations["approveMemberUpgrade"];
  };
  "/members/{id}/upgrade/reject": {
    /** reject a member upgrade */
    post: operations["rejectMemberUpgrade"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AboutusCategoryModelV1: {
      /** category_id */
      category_id: number;
      /** position */
      position?: number;
      /** title */
      title?: string;
      /** users */
      users?: components["schemas"]["AboutusUserModelV1"][];
    };
    AboutusCategoryModelUpdateV1: {
      /** title */
      title?: string;
    };
    AboutusCategoryReorderModelV1: {
      /** category_id */
      category_id: number;
      /** position */
      position?: number;
      /** users */
      users?: components["schemas"]["AboutusUserReorderModelV1"][];
    };
    AboutusDescriptionModelV1: {
      /** description */
      description?: string;
    };
    AboutusUserModelV1: {
      /** entry_id */
      entry_id: number;
      /** position */
      position?: number;
      /** username */
      username?: string;
      /** user_id */
      user_id?: number;
    };
    AboutusUserModelUpdateV1: {
      /** username */
      username?: string;
    };
    AboutusUserReorderModelV1: {
      /** entry_id */
      entry_id: number;
      /** position */
      position?: number;
    };
    AccountForgotPassModelV1: {
      /** email */
      email?: string;
    };
    AccountLoginModelV1: {
      /** username */
      username?: string;
      /**
       * password
       * Format: password
       */
      password?: string;
    };
    /** ApiResponseV1 */
    ApiResponseV1: {
      status: string;
      reason: string;
      context?: Record<string, never>;
    };
    AuthorsLockModelV1: {
      /** field */
      field?: string;
      /** reason */
      reason?: string;
      /** user_id */
      user_id?: number;
      /** username */
      username?: string;
      time_locked?: components["schemas"]["TimeV1"];
    };
    AuthorsLockModelUpdateV1: {
      /** reason */
      reason?: string;
    };
    AuthorsModelV1: {
      /** id */
      id?: number;
      /** name */
      name?: string;
      /** url */
      url?: string;
      /** associated */
      associated?: {
        /** name */
        name?: string;
      }[];
      image?: components["schemas"]["ImageModelV1"];
      /** actualname */
      actualname?: string;
      birthday?: components["schemas"]["BirthdayModelV1"];
      /** birthplace */
      birthplace?: string;
      /**
       * bloodtype
       * @enum {string}
       */
      bloodtype?: "N/A" | "A" | "B" | "AB" | "O";
      /**
       * gender
       * @enum {string}
       */
      gender?: "N/A" | "Male" | "Female" | "Other";
      /**
       * status
       * @enum {string}
       */
      status?:
        | "N/A"
        | "Active"
        | "Temporarily Inactive"
        | "Retired"
        | "Deceased";
      status_date?: components["schemas"]["StatusDateModelV1"];
      /** genres */
      genres?: string[];
      /** AuthorsModelV1Stats */
      stats?: {
        /** total_series */
        total_series?: number;
      };
      /** AuthorsModelV1Social */
      social?: {
        /** officialsite */
        officialsite?: string;
        /** facebook */
        facebook?: string;
        /** twitter */
        twitter?: string;
      };
      /** comments */
      comments?: string;
      last_updated?: components["schemas"]["TimeV1"];
      added_by?: components["schemas"]["UserModelSearchV1"];
      /** AuthorsModelV1Admin */
      admin?: {
        /** approved */
        approved?: boolean;
      };
    };
    AuthorsModelUpdateV1: {
      /** name */
      name?: string;
      /** associated */
      associated?: {
        /** name */
        name?: string;
      }[];
      /** actualname */
      actualname?: string;
      birthday?: components["schemas"]["BirthdayModelV1"];
      /** birthplace */
      birthplace?: string;
      /**
       * bloodtype
       * @enum {string}
       */
      bloodtype?: "N/A" | "A" | "B" | "AB" | "O";
      /**
       * gender
       * @enum {string}
       */
      gender?: "N/A" | "Male" | "Female" | "Other";
      /**
       * status
       * @enum {string}
       */
      status?:
        | "N/A"
        | "Active"
        | "Temporarily Inactive"
        | "Retired"
        | "Deceased";
      status_date?: components["schemas"]["StatusDateModelV1"];
      /** AuthorsModelUpdateV1Social */
      social?: {
        /** officialsite */
        officialsite?: string;
        /** facebook */
        facebook?: string;
        /** twitter */
        twitter?: string;
      };
      /** comments */
      comments?: string;
      /** AuthorsModelUpdateV1Admin */
      admin?: {
        /** approved */
        approved?: boolean;
      };
    };
    AuthorsModelSearchV1: {
      /** id */
      id?: number;
      /** name */
      name?: string;
      /** url */
      url?: string;
      /** genres */
      genres?: string[];
      /** AuthorsModelSearchV1Stats */
      stats?: {
        /** total_series */
        total_series?: number;
      };
      added_by?: components["schemas"]["UserModelSearchV1"];
    };
    AuthorsSearchRequestV1: {
      /** search */
      search?: string;
      /** added_by */
      added_by?: number;
      /** page */
      page?: number;
      /** perpage */
      perpage?: number;
      /** letter */
      letter?: string;
      /** genre */
      genre?: string[];
      /**
       * orderby
       * @enum {string}
       */
      orderby?: "name" | "series" | "score";
      /** pending */
      pending?: boolean;
    };
    AuthorsSearchResponseV1: {
      /** total_hits */
      total_hits?: number;
      /** page */
      page?: number;
      /** per_page */
      per_page?: number;
      /** results */
      results?: {
        record?: components["schemas"]["AuthorsModelSearchV1"];
        /** hit_name */
        hit_name?: string;
        /** hit_genre */
        hit_genre?: string[];
      }[];
    };
    AuthorsSeriesListRequestV1: {
      /**
       * orderby
       * @enum {string}
       */
      orderby?: "title" | "year";
    };
    AuthorsSeriesListResponseV1: {
      /** total_series */
      total_series?: number;
      /** series_list */
      series_list?: {
        /** title */
        title?: string;
        /** series_id */
        series_id?: number;
        /** year */
        year?: string;
        last_updated?: components["schemas"]["TimeV1"];
        /** genres */
        genres?: string[];
        /** AuthorsSeriesListResponseV1SeriesListMetadata */
        metadata?: {
          user_list?: components["schemas"]["ListsSeriesModelV1"];
        };
      }[];
      /** genre_list */
      genre_list?: {
        /** genre */
        genre?: string;
        /** count */
        count?: number;
      }[];
    };
    CategoriesModelSearchV1: {
      /** category */
      category?: string;
      /** usage */
      usage?: number;
      /** votes */
      votes?: number;
      /** votes_plus */
      votes_plus?: number;
      /** votes_minus */
      votes_minus?: number;
    };
    CategoriesModelV1: {
      /** series_id */
      series_id?: number;
      /** category */
      category?: string;
      /** votes */
      votes?: number;
      /** votes_plus */
      votes_plus?: number;
      /** votes_minus */
      votes_minus?: number;
      /** added_by */
      added_by?: number;
    };
    CategoriesModelUpdateV1: {
      /** category */
      category?: string;
    };
    CategoriesSearchRequestV1: {
      /** search */
      search?: string;
      /** page */
      page?: number;
      /** perpage */
      perpage?: number;
      /** letter */
      letter?: string;
      /**
       * orderby
       * @enum {string}
       */
      orderby?: "category" | "agree" | "disagree" | "usage";
    };
    CategoriesSearchResponseV1: {
      /** total_hits */
      total_hits?: number;
      /** page */
      page?: number;
      /** per_page */
      per_page?: number;
      /** results */
      results?: {
        record?: components["schemas"]["CategoriesModelSearchV1"];
      }[];
    };
    BirthdayModelV1: {
      /** month */
      month?: number;
      /** day */
      day?: number;
      /** year */
      year?: number;
      /** as_string */
      as_string?: string;
      /** zodiac */
      zodiac?: string;
    };
    PerPageSearchRequestV1: {
      /** page */
      page?: number;
      /** perpage */
      perpage?: number;
    };
    StatusDateModelV1: {
      /** month */
      month?: number;
      /** day */
      day?: number;
      /** year */
      year?: number;
      /** as_string */
      as_string?: string;
    };
    ConvoBulkModelV1: {
      /** convo_id_list */
      convo_id_list?: number[];
    };
    ConvoMessageListRequestV1: {
      /** page */
      page?: number;
      /** perpage */
      perpage?: number;
    };
    ConvoMessageModelV1: {
      /** message_id */
      message_id?: number;
      /** convo_id */
      convo_id?: number;
      /** author_id */
      author_id?: number;
      /** author_name */
      author_name?: string;
      /** is_admin */
      is_admin?: boolean;
      /** content */
      content?: string;
      time_added?: components["schemas"]["TimeV1"];
      last_edit?: components["schemas"]["TimeV1"];
    };
    ConvoMessageModelUpdateV1: {
      /** content */
      content?: string;
    };
    ConvoMessageSearchRequestV1: {
      /** search */
      search?: string;
      /** added_by */
      added_by?: number;
      /** page */
      page?: number;
      /** perpage */
      perpage?: number;
    };
    ConvoMessageSearchResponseV1: {
      /** total_hits */
      total_hits?: number;
      /** page */
      page?: number;
      /** per_page */
      per_page?: number;
      /** results */
      results?: {
        record?: components["schemas"]["ConvoMessageModelV1"];
        /** ConvoMessageSearchResponseV1ResultsMetadata */
        metadata?: {
          /** user_ignored */
          user_ignored?: boolean;
        };
      }[];
    };
    ConvoModelAddV1: {
      /** topic */
      topic?: string;
      /** participants */
      participants?: components["schemas"]["ConvoParticipantModelAddV1"][];
      message?: components["schemas"]["ConvoMessageModelUpdateV1"];
    };
    ConvoModelV1: {
      /** convo_id */
      convo_id?: number;
      /** topic */
      topic?: string;
      /** author_id */
      author_id?: number;
      /** author_name */
      author_name?: string;
      time_added?: components["schemas"]["TimeV1"];
      last_edit?: components["schemas"]["TimeV1"];
    };
    ConvoModelUpdateV1: {
      /** topic */
      topic?: string;
    };
    ConvoParticipantModelAddV1: {
      /** to */
      to?: string;
    };
    ConvoParticipantModelV1: {
      /** user_id */
      user_id?: number;
      /** username */
      username?: string;
      /** is_admin */
      is_admin?: boolean;
      time_added?: components["schemas"]["TimeV1"];
      last_time_seen?: components["schemas"]["TimeV1"];
      /** joined */
      joined?: boolean;
    };
    ConvoSearchRequestV1: {
      /** search */
      search?: string;
      /** page */
      page?: number;
      /** perpage */
      perpage?: number;
    };
    ConvoSearchResponseV1: {
      /** total_hits */
      total_hits?: number;
      /** page */
      page?: number;
      /** per_page */
      per_page?: number;
      /** results */
      results?: {
        record?: components["schemas"]["ConvoModelV1"];
        /** ConvoSearchResponseV1ResultsMetadata */
        metadata?: {
          message?: components["schemas"]["ConvoMessageModelV1"];
          participant?: components["schemas"]["ConvoParticipantModelV1"];
        };
      }[];
    };
    ConvoUserIgnoreModelV1: {
      /** user_ignored */
      user_ignored?: boolean;
    };
    FaqCategoryModelV1: {
      /** category_id */
      category_id: number;
      /** title */
      title?: string;
      /** position */
      position?: number;
    };
    FaqCategoryQuestionsModelV1: {
      /** category_id */
      category_id: number;
      /** title */
      title?: string;
      /** questions */
      questions?: components["schemas"]["FaqQuestionOnlyModelV1"][];
      /** position */
      position?: number;
    };
    FaqCategoryModelUpdateV1: {
      /** title */
      title?: string;
    };
    FaqCategoryReorderModelV1: {
      /** category_id */
      category_id: number;
      /** position */
      position?: number;
      /** questions */
      questions?: components["schemas"]["FaqQuestionReorderModelV1"][];
    };
    FaqQuestionModelV1: {
      /** question_id */
      question_id: number;
      /** question */
      question?: string;
      /** answer */
      answer?: string;
      /** position */
      position?: number;
    };
    FaqQuestionOnlyModelV1: {
      /** question_id */
      question_id: number;
      /** question */
      question?: string;
      /** position */
      position?: number;
    };
    FaqQuestionModelUpdateV1: {
      /** question */
      question?: string;
      /** answer */
      answer?: string;
    };
    FaqQuestionReorderModelV1: {
      /** question_id */
      question_id: number;
      /** position */
      position?: number;
    };
    ForumAdminHistoryModelV1: {
      user?: components["schemas"]["UserModelSearchV1"];
      action_time?: components["schemas"]["TimeV1"];
      /** action */
      action?: string;
    };
    ForumAdminHistorySearchRequestV1: {
      /** page */
      page?: number;
      /** perpage */
      perpage?: number;
      /** uid */
      uid?: number;
    };
    ForumAdminHistorySearchResponseV1: {
      /** total_hits */
      total_hits?: number;
      /** page */
      page?: number;
      /** per_page */
      per_page?: number;
      /** results */
      results?: {
        record?: components["schemas"]["ForumAdminHistoryModelV1"];
      }[];
    };
    ForumAdminModelV1: {
      user?: components["schemas"]["UserModelSearchV1"];
      /** user_id */
      user_id?: number;
    };
    ForumAdminModelUpdateV1: {
      /** user_id */
      user_id?: number;
    };
    ForumCategoryModelV1: {
      /** category_id */
      category_id?: number;
      /** name */
      name?: string;
      /** position */
      position?: number;
    };
    ForumCategoryModelListV1: {
      /** category_id */
      category_id?: number;
      /** name */
      name?: string;
      /** forums */
      forums?: {
        forum?: components["schemas"]["ForumForumModelListV1"];
      }[];
    };
    ForumCategoryModelUpdateV1: {
      /** name */
      name?: string;
      /** position */
      position?: number;
    };
    ForumForumModelV1: {
      /** forum_id */
      forum_id?: number;
      /** name */
      name?: string;
      /** url */
      url?: string;
      /** description */
      description?: string;
      /** position */
      position?: number;
      /** ForumForumModelV1Category */
      category?: {
        /** category_id */
        category_id?: number;
        /** category_name */
        category_name?: string;
      };
      /** moderators */
      moderators?: components["schemas"]["ForumAdminModelV1"][];
      series?: components["schemas"]["SeriesModelSearchV1"];
      /** ForumForumModelV1Stats */
      stats?: {
        /** topics */
        topics?: number;
        /** posts */
        posts?: number;
      };
      last_topic?: components["schemas"]["ForumTopicModelSearchV1"];
      /** ForumForumModelV1Admin */
      admin?: {
        /** locked */
        locked?: boolean;
        /** hidden */
        hidden?: boolean;
        /** verify_age */
        verify_age?: boolean;
      };
    };
    ForumForumModelListV1: {
      /** forum_id */
      forum_id?: number;
      /** name */
      name?: string;
      /** url */
      url?: string;
      /** description */
      description?: string;
      /** position */
      position?: number;
      /** moderators */
      moderators?: components["schemas"]["ForumAdminModelV1"][];
      series?: components["schemas"]["SeriesModelSearchV1"];
      /** ForumForumModelListV1Stats */
      stats?: {
        /** topics */
        topics?: number;
        /** posts */
        posts?: number;
      };
      last_topic?: components["schemas"]["ForumTopicModelSearchV1"];
      /** ForumForumModelListV1Admin */
      admin?: {
        /** locked */
        locked?: boolean;
        /** hidden */
        hidden?: boolean;
        /** verify_age */
        verify_age?: boolean;
      };
    };
    ForumForumModelUpdateV1: {
      /** name */
      name?: string;
      /** description */
      description?: string;
      /** position */
      position?: number;
      /** ForumForumModelUpdateV1Admin */
      admin?: {
        /** locked */
        locked?: boolean;
        /** hidden */
        hidden?: boolean;
        /** verify_age */
        verify_age?: boolean;
      };
    };
    ForumLookupResponseV1: {
      /** topic_id */
      topic_id?: number;
      /** forum_id */
      forum_id?: number;
    };
    ForumPollAnswerModelV1: {
      /** answer_id */
      answer_id: number;
      /** answer */
      answer: string;
      /** votes */
      votes?: number;
      /** ForumPollAnswerModelV1Image */
      image?: {
        /** height */
        height?: number;
        /** width */
        width?: number;
        /** filename */
        filename?: string;
      };
    };
    ForumPollAnswerModelUpdateV1: {
      /** answer_id */
      answer_id: number;
      /** answer */
      answer: string;
      /** temp_image_id */
      temp_image_id?: number;
    };
    ForumPollModelV1: {
      /** question */
      question?: string;
      /** answers */
      answers?: components["schemas"]["ForumPollAnswerModelV1"][];
      /** votes */
      votes?: number;
      /** ForumPollModelV1Admin */
      admin?: {
        /** image_poll */
        image_poll?: boolean;
      };
    };
    ForumPollModelUpdateV1: {
      /** question */
      question?: string;
      /** answers */
      answers?: components["schemas"]["ForumPollAnswerModelUpdateV1"][];
    };
    ForumPollTempImageModelV1: {
      /** image_id */
      image_id?: number;
      /** caption */
      caption?: string;
      /** ForumPollTempImageModelV1Url */
      url?: {
        /** original */
        original?: string;
        /** thumb */
        thumb?: string;
      };
      /** height */
      height?: number;
      /** width */
      width?: number;
      time_added?: components["schemas"]["TimeV1"];
    };
    ForumPollVoteModelV1: {
      /** choice_id */
      choice_id?: number;
    };
    ForumPostByUserResponseV1: {
      /** topic_id */
      topic_id?: number;
      /** post_id_list */
      post_id_list?: number[];
    };
    ForumPostListResponseV1: {
      /** total_hits */
      total_hits?: number;
      /** page */
      page?: number;
      /** per_page */
      per_page?: number;
      /** results */
      results?: {
        record?: components["schemas"]["ForumPostModelV1"];
        /** ForumPostListResponseV1ResultsMetadata */
        metadata?: {
          user_warn?: components["schemas"]["ForumWarnModelPublicV1"];
          /** reported */
          reported?: boolean;
          /** is_moderator */
          is_moderator?: boolean;
          /** is_forum_admin */
          is_forum_admin?: boolean;
        };
      }[];
    };
    ForumPostModelV1: {
      /** post_id */
      post_id?: number;
      /** body */
      body?: string;
      /** ForumPostModelV1Topic */
      topic?: {
        /** forum_id */
        forum_id?: number;
        /** topic_id */
        topic_id?: number;
        /** topic */
        topic?: string;
      };
      author?: components["schemas"]["UserModelSearchV1"];
      /** ForumPostModelV1ReplyTo */
      reply_to?: {
        /** post_id */
        post_id?: number;
        /** ForumPostModelV1ReplyToPostAuthor */
        post_author?: {
          /** author_id */
          author_id?: number;
          /** author_name */
          author_name?: string;
        };
      };
      /** ForumPostModelV1LastEdit */
      last_edit?: {
        /** by */
        by?: string;
        time?: components["schemas"]["TimeV1"];
      };
      time_added?: components["schemas"]["TimeV1"];
    };
    ForumPostModelSearchV1: {
      /** post_id */
      post_id?: number;
      /** body_excerpt */
      body_excerpt?: string;
      /** ForumPostModelSearchV1Topic */
      topic?: {
        /** forum_id */
        forum_id?: number;
        /** topic_id */
        topic_id?: number;
        /** topic */
        topic?: string;
      };
      author?: components["schemas"]["UserModelSearchV1"];
      time_added?: components["schemas"]["TimeV1"];
    };
    ForumPostModelUpdateV1: {
      /** body */
      body?: string;
      /** reply_to */
      reply_to?: number;
    };
    ForumPostReportModelV1: {
      /** report_id */
      report_id?: number;
      /** topic_id */
      topic_id?: number;
      topic?: components["schemas"]["ForumTopicModelSearchV1"];
      /** post_id */
      post_id?: number;
      post?: components["schemas"]["ForumPostModelSearchV1"];
      /** user_id */
      user_id?: number;
      user?: components["schemas"]["UserModelSearchV1"];
      /** reason */
      reason?: string;
    };
    ForumPostReportModelUpdateV1: {
      /** reason */
      reason?: string;
    };
    ForumSearchRequestV1: {
      /**
       * search_by
       * @enum {string}
       */
      search_by?: "post" | "topic";
      /**
       * method
       * @enum {string}
       */
      method?: "fulltext" | "exact";
      /** search */
      search?: string;
      /** since */
      since?: number;
      /** after_id */
      after_id?: number;
      /** before_id */
      before_id?: number;
      /** page */
      page?: number;
      /** perpage */
      perpage?: number;
      /** by_user_id */
      by_user_id?: number;
      /** filter_user_id */
      filter_user_id?: number;
    };
    ForumSearchResponseV1: {
      /** total_hits */
      total_hits?: number;
      /** page */
      page?: number;
      /** per_page */
      per_page?: number;
      /** topic_results */
      topic_results?: {
        record?: components["schemas"]["ForumTopicModelSearchV1"];
        /** ForumSearchResponseV1TopicResultsMetadata */
        metadata?: {
          /** is_subscribed */
          is_subscribed?: boolean;
          /** my_latest_post_in_topic */
          my_latest_post_in_topic?: number;
        };
      }[];
      /** post_results */
      post_results?: {
        record?: components["schemas"]["ForumPostModelSearchV1"];
        /** ForumSearchResponseV1PostResultsMetadata */
        metadata?: {
          /** is_subscribed */
          is_subscribed?: boolean;
          /** my_latest_post_in_topic */
          my_latest_post_in_topic?: number;
          /** ForumSearchResponseV1PostResultsMetadataForumInfo */
          forum_info?: {
            /** forum_id */
            forum_id?: number;
            /** forum_name */
            forum_name?: string;
          };
          /** ForumSearchResponseV1PostResultsMetadataTopicStats */
          topic_stats?: {
            /** posts */
            posts?: number;
            /** views */
            views?: number;
          };
        };
      }[];
    };
    ForumTopicListRequestV1: {
      /** page */
      page?: number;
      /** perpage */
      perpage?: number;
      /**
       * orderby
       * @enum {string}
       */
      orderby?: "last_post_date" | "topic_start_date";
    };
    ForumTopicListResponseV1: {
      /** total_hits */
      total_hits?: number;
      /** page */
      page?: number;
      /** per_page */
      per_page?: number;
      /** results */
      results?: {
        record?: components["schemas"]["ForumTopicModelSearchV1"];
        /** ForumTopicListResponseV1ResultsMetadata */
        metadata?: {
          first_post?: components["schemas"]["ForumPostModelV1"];
        };
      }[];
    };
    ForumTopicModelAddV1: {
      topic?: components["schemas"]["ForumTopicModelUpdateV1"];
      post?: components["schemas"]["ForumPostModelUpdateV1"];
      poll?: components["schemas"]["ForumPollModelUpdateV1"];
    };
    ForumTopicModelV1: {
      /** topic_id */
      topic_id?: number;
      /** topic */
      topic?: string;
      /** url */
      url?: string;
      last_post?: components["schemas"]["ForumPostModelSearchV1"];
      /** ForumTopicModelV1Stats */
      stats?: {
        /** posts */
        posts?: number;
        /** views */
        views?: number;
      };
      /** ForumTopicModelV1Forum */
      forum?: {
        /** forum_id */
        forum_id?: number;
        /** forum_name */
        forum_name?: string;
      };
      /** is_poll */
      is_poll?: boolean;
      poll?: components["schemas"]["ForumPollModelV1"];
      /** ForumTopicModelV1Admin */
      admin?: {
        /** pinned */
        pinned?: boolean;
        /** locked */
        locked?: boolean;
        /** global */
        global?: boolean;
      };
      topic_starter?: components["schemas"]["UserModelSearchV1"];
      time_added?: components["schemas"]["TimeV1"];
    };
    ForumTopicModelSearchV1: {
      /** topic_id */
      topic_id?: number;
      /** topic */
      topic?: string;
      /** url */
      url?: string;
      last_post?: components["schemas"]["ForumPostModelSearchV1"];
      /** ForumTopicModelSearchV1Stats */
      stats?: {
        /** posts */
        posts?: number;
        /** views */
        views?: number;
      };
      /** ForumTopicModelSearchV1Forum */
      forum?: {
        /** forum_id */
        forum_id?: number;
        /** forum_name */
        forum_name?: string;
      };
      /** is_poll */
      is_poll?: boolean;
      /** ForumTopicModelSearchV1Admin */
      admin?: {
        /** pinned */
        pinned?: boolean;
        /** locked */
        locked?: boolean;
        /** global */
        global?: boolean;
      };
      topic_starter?: components["schemas"]["UserModelSearchV1"];
      time_added?: components["schemas"]["TimeV1"];
    };
    ForumTopicModelUpdateV1: {
      /** topic */
      topic?: string;
      /** ForumTopicModelUpdateV1Forum */
      forum?: {
        /** forum_id */
        forum_id?: number;
      };
      /** ForumTopicModelUpdateV1Admin */
      admin?: {
        /** pinned */
        pinned?: boolean;
        /** locked */
        locked?: boolean;
        /** global */
        global?: boolean;
      };
    };
    ForumWarnModelV1: {
      /** user_id */
      user_id?: number;
      time_added?: components["schemas"]["TimeV1"];
      /** level */
      level: number;
      /** reason */
      reason: string;
      /** send_reason */
      send_reason?: boolean;
      by_user?: components["schemas"]["UserModelSearchV1"];
    };
    ForumWarnModelPublicV1: {
      time_added?: components["schemas"]["TimeV1"];
      /** level */
      level: number;
    };
    ForumWarnModelUpdateV1: {
      /** level */
      level: number;
      /** reason */
      reason: string;
      /** send_reason */
      send_reason?: boolean;
    };
    GenreModelV1: {
      /** id */
      id?: number;
      /** genre */
      genre?: string;
      /** description */
      description?: string;
      /** demographic */
      demographic?: boolean;
    };
    GenreModelStatsV1: {
      /** id */
      id?: number;
      /** genre */
      genre?: string;
      /** description */
      description?: string;
      /** GenreModelStatsV1Stats */
      stats?: {
        /** series */
        series?: number;
        /** authors */
        authors?: number;
        /** filters */
        filters?: number;
        /** highlights */
        highlights?: number;
      };
      /** demographic */
      demographic?: boolean;
    };
    GenreModelUpdateV1: {
      /** genre */
      genre?: string;
      /** description */
      description?: string;
      /** demographic */
      demographic?: boolean;
    };
    GroupsModelV1: {
      /** group_id */
      group_id?: number;
      /** name */
      name?: string;
      /** url */
      url?: string;
      /** associated */
      associated?: {
        /** name */
        name?: string;
      }[];
      /** GroupsModelV1Social */
      social?: {
        /** site */
        site?: string;
        /** facebook */
        facebook?: string;
        /** twitter */
        twitter?: string;
        /** GroupsModelV1SocialIrc */
        irc?: {
          /** channel */
          channel?: string;
          /** server */
          server?: string;
        };
        /** forum */
        forum?: string;
        /** discord */
        discord?: string;
      };
      /** active */
      active?: boolean;
      /** notes */
      notes?: string;
      added_by?: components["schemas"]["UserModelSearchV1"];
      /** GroupsModelV1Admin */
      admin?: {
        /** approved */
        approved?: boolean;
        /** hold */
        hold?: boolean;
      };
    };
    GroupsModelSearchV1: {
      /** group_id */
      group_id?: number;
      /** name */
      name?: string;
      /** url */
      url?: string;
      /** GroupsModelSearchV1Social */
      social?: {
        /** site */
        site?: string;
        /** facebook */
        facebook?: string;
        /** twitter */
        twitter?: string;
        /** GroupsModelSearchV1SocialIrc */
        irc?: {
          /** channel */
          channel?: string;
          /** server */
          server?: string;
        };
        /** forum */
        forum?: string;
        /** discord */
        discord?: string;
      };
      /** active */
      active?: boolean;
      /** notes */
      notes?: string;
      added_by?: components["schemas"]["UserModelSearchV1"];
    };
    GroupsModelUpdateV1: {
      /** name */
      name?: string;
      /** associated */
      associated?: {
        /** name */
        name?: string;
      }[];
      /** GroupsModelUpdateV1Social */
      social?: {
        /** site */
        site?: string;
        /** facebook */
        facebook?: string;
        /** twitter */
        twitter?: string;
        /** GroupsModelUpdateV1SocialIrc */
        irc?: {
          /** channel */
          channel?: string;
          /** server */
          server?: string;
        };
        /** forum */
        forum?: string;
        /** discord */
        discord?: string;
      };
      /** active */
      active?: boolean;
      /** notes */
      notes?: string;
      /** GroupsModelUpdateV1Admin */
      admin?: {
        /** approved */
        approved?: boolean;
        /** hold */
        hold?: boolean;
      };
    };
    GroupsSearchRequestV1: {
      /** search */
      search?: string;
      /** added_by */
      added_by?: number;
      /** page */
      page?: number;
      /** perpage */
      perpage?: number;
      /** letter */
      letter?: string;
      /** active */
      active?: boolean;
      /** pending */
      pending?: boolean;
    };
    GroupsSearchResponseV1: {
      /** total_hits */
      total_hits?: number;
      /** page */
      page?: number;
      /** per_page */
      per_page?: number;
      /** results */
      results?: {
        record?: components["schemas"]["GroupsModelSearchV1"];
        /** hit_name */
        hit_name?: string;
      }[];
    };
    GroupsSeriesListResponseV1: {
      /** release_frequency */
      release_frequency?: string;
      /** series_titles */
      series_titles?: {
        /** title */
        title?: string;
        /** series_id */
        series_id?: number;
        last_updated?: components["schemas"]["TimeV1"];
      }[];
      /** series_genres */
      series_genres?: {
        /** genre */
        genre?: string;
        /** count */
        count?: number;
      }[];
      /** series_categories */
      series_categories?: {
        /** category */
        category?: string;
        /** votes */
        votes?: number;
      }[];
    };
    AvatarModelV1: {
      /** id */
      id?: number;
      /** url */
      url?: string;
      /** title */
      title?: string;
      /** extension */
      extension?: string;
      /** height */
      height?: number;
      /** width */
      width?: number;
    };
    AvatarModelSearchV1: {
      /** id */
      id?: number;
      /** url */
      url?: string;
      /** height */
      height?: number;
      /** width */
      width?: number;
    };
    AvatarModelUpdateV1: {
      /** title */
      title?: string;
    };
    ImageModelV1: {
      /** ImageModelV1Url */
      url?: {
        /** original */
        original?: string;
        /** thumb */
        thumb?: string;
      };
      /** height */
      height?: number;
      /** width */
      width?: number;
    };
    ListsBulkAddModelV1: {
      /**
       * priority
       * @enum {string}
       */
      priority?: "High" | "Low";
      /** series_title */
      series_title?: string;
    };
    ListsModelV1: {
      /** list_id */
      list_id?: number;
      /** title */
      title?: string;
      /** description */
      description?: string;
      /**
       * type
       * @enum {string}
       */
      type?: "read" | "wish" | "complete" | "unfinished" | "hold";
      /** icon */
      icon?: string;
      /** custom */
      custom?: boolean;
      /** ListsModelV1Options */
      options?: {
        /** public */
        public?: boolean;
        /**
         * sort
         * @enum {string}
         */
        sort?:
          | "title"
          | "priority"
          | "date"
          | "rating"
          | "release"
          | "unread"
          | "userrating";
        /** show_rating */
        show_rating?: boolean;
        /** show_status */
        show_status?: boolean;
        /**
         * show_comment
         * @enum {string}
         */
        show_comment?: "link" | "text" | "none";
        /** show_per_page */
        show_per_page?: number;
        /** show_latest_chapter */
        show_latest_chapter?: boolean;
      };
    };
    ListsModelUpdateV1: {
      /** title */
      title?: string;
      /** description */
      description?: string;
      /**
       * type
       * @enum {string}
       */
      type?: "read" | "wish" | "complete" | "unfinished" | "hold";
      /** icon */
      icon?: string;
      /** ListsModelUpdateV1Options */
      options?: {
        /** public */
        public?: boolean;
        /**
         * sort
         * @enum {string}
         */
        sort?:
          | "title"
          | "priority"
          | "date"
          | "rating"
          | "release"
          | "unread"
          | "userrating";
        /** show_rating */
        show_rating?: boolean;
        /** show_status */
        show_status?: boolean;
        /**
         * show_comment
         * @enum {string}
         */
        show_comment?: "link" | "text" | "none";
        /** show_per_page */
        show_per_page?: number;
        /** show_latest_chapter */
        show_latest_chapter?: boolean;
      };
    };
    ListsPublicSearchResponseV1: {
      /** total_hits */
      total_hits?: number;
      /** page */
      page?: number;
      /** per_page */
      per_page?: number;
      list?: components["schemas"]["ListsModelV1"];
      /** results */
      results?: {
        /** series_id */
        series_id?: number;
        /** series_title */
        series_title?: string;
        /** volume */
        volume?: number;
        /** chapter */
        chapter?: number;
        /** ListsPublicSearchResponseV1ResultsMetadata */
        metadata?: {
          /** user_rating */
          user_rating?: number;
          /** ListsPublicSearchResponseV1ResultsMetadataUserComment */
          user_comment?: {
            /** comment_id */
            comment_id?: number;
            /** comment_preview */
            comment_preview?: string;
          };
          user_list?: components["schemas"]["ListsSeriesModelV1"];
        };
      }[];
    };
    ListsPublicStatsModelV1: {
      /** genres */
      genres?: {
        /** genre_name */
        genre_name?: string;
        /** count */
        count?: number;
      }[];
    };
    ListsSearchRequestV1: {
      /** page */
      page?: number;
      /** perpage */
      perpage?: number;
    };
    ListsSearchResponseV1: {
      /** total_hits */
      total_hits?: number;
      /** page */
      page?: number;
      /** per_page */
      per_page?: number;
      list?: components["schemas"]["ListsModelV1"];
      /** results */
      results?: {
        record?: components["schemas"]["ListsSeriesModelV1"];
        /** ListsSearchResponseV1ResultsMetadata */
        metadata?: {
          series?: components["schemas"]["SeriesModelSearchV1"];
          /** user_rating */
          user_rating?: number;
        };
      }[];
    };
    ListsSeriesModelV1: {
      /** ListsSeriesModelV1Series */
      series: {
        /** id */
        id: number;
        /** title */
        title?: string;
      };
      /** list_id */
      list_id?: number;
      /** list_type */
      list_type?: string;
      /** list_icon */
      list_icon?: string;
      /** ListsSeriesModelV1Status */
      status?: {
        /** volume */
        volume?: number;
        /** chapter */
        chapter?: number;
      };
      /** priority */
      priority?: number;
      time_added?: components["schemas"]["TimeV1"];
    };
    ListsSeriesModelUpdateV1: {
      /** ListsSeriesModelUpdateV1Series */
      series: {
        /** id */
        id: number;
        /** title */
        title?: string;
      };
      /** list_id */
      list_id?: number;
      /** ListsSeriesModelUpdateV1Status */
      status?: {
        /** volume */
        volume?: number;
        /** chapter */
        chapter?: number;
        /** increment_volume */
        increment_volume?: number;
        /** increment_chapter */
        increment_chapter?: number;
      };
      /** priority */
      priority?: number;
    };
    ListsSimilarUsersResponseV1: {
      /** total_hits */
      total_hits?: number;
      /** users */
      users?: {
        /** user_id */
        user_id?: number;
        /** user_name */
        user_name?: string;
        /** user_rating */
        user_rating?: number;
        /** intersect_count */
        intersect_count?: number;
        /** percent_match */
        percent_match?: number;
      }[];
    };
    MiscOnlineUsersModelV1: {
      /** users */
      users?: {
        record?: components["schemas"]["UserModelSearchV1"];
        /** MiscOnlineUsersModelV1UsersMetadata */
        metadata?: {
          last_active?: components["schemas"]["TimeV1"];
          /** invisible */
          invisible?: boolean;
          /** super_moderator */
          super_moderator?: boolean;
        };
      }[];
    };
    MiscSlowTransactionStatusResponseV1: {
      /**
       * state
       * @enum {string}
       */
      state?: "pending" | "in progress" | "complete" | "error";
      /** error */
      error?: string;
      /** percent */
      percent?: number;
      /** done */
      done?: number;
      /** total */
      total?: number;
      /** return */
      return?: string;
    };
    MiscStatsModelV1: {
      /** total_users */
      total_users?: number;
      latest_user?: components["schemas"]["UserModelSearchV1"];
      /** total_forum_topics */
      total_forum_topics?: number;
      /** total_forum_posts */
      total_forum_posts?: number;
    };
    PollModelV1: {
      /** active */
      active?: boolean;
      /** question */
      question?: string;
      /** answers */
      answers?: {
        /** answer_id */
        answer_id?: number;
        /** answer */
        answer?: string;
        /** total */
        total?: number;
      }[];
      /** total_votes */
      total_votes?: number;
    };
    PollModelUpdateV1: {
      /** question */
      question?: string;
      /** answers */
      answers?: {
        /** answer */
        answer?: string;
      }[];
    };
    PollVoteStatusModelV1: {
      /** voted */
      voted?: boolean;
    };
    PublishersModelV1: {
      /** publisher_id */
      publisher_id?: number;
      /** name */
      name?: string;
      /** url */
      url?: string;
      /** associated */
      associated?: {
        /** name */
        name?: string;
      }[];
      /**
       * type
       * @enum {string}
       */
      type?:
        | "N/A"
        | "Japanese"
        | "English"
        | "Korean"
        | "Taiwanese"
        | "Chinese"
        | "Thai"
        | "Indonesian"
        | "Filipino"
        | "Vietnamese"
        | "Malaysian"
        | "Nordic"
        | "French"
        | "Spanish"
        | "Russian"
        | "Polish"
        | "Portuguese"
        | "German"
        | "Hindi"
        | "Arabic";
      /** info */
      info?: string;
      /** site */
      site?: string;
      /** PublishersModelV1Stats */
      stats?: {
        /** total_series */
        total_series?: number;
        /** total_publications */
        total_publications?: number;
      };
      added_by?: components["schemas"]["UserModelSearchV1"];
      last_updated?: components["schemas"]["TimeV1"];
      /** PublishersModelV1Admin */
      admin?: {
        /** approved */
        approved?: boolean;
      };
    };
    PublishersModelSearchV1: {
      /** publisher_id */
      publisher_id?: number;
      /** name */
      name?: string;
      /** url */
      url?: string;
      /**
       * type
       * @enum {string}
       */
      type?:
        | "N/A"
        | "Japanese"
        | "English"
        | "Korean"
        | "Taiwanese"
        | "Chinese"
        | "Thai"
        | "Indonesian"
        | "Filipino"
        | "Vietnamese"
        | "Malaysian"
        | "Nordic"
        | "French"
        | "Spanish"
        | "Russian"
        | "Polish"
        | "Portuguese"
        | "German"
        | "Hindi"
        | "Arabic";
      /** PublishersModelSearchV1Stats */
      stats?: {
        /** total_series */
        total_series?: number;
        /** total_publications */
        total_publications?: number;
      };
      added_by?: components["schemas"]["UserModelSearchV1"];
    };
    PublishersModelUpdateV1: {
      /** name */
      name?: string;
      /** associated */
      associated?: {
        /** name */
        name?: string;
      }[];
      /**
       * type
       * @enum {string}
       */
      type?:
        | "N/A"
        | "Japanese"
        | "English"
        | "Korean"
        | "Taiwanese"
        | "Chinese"
        | "Thai"
        | "Indonesian"
        | "Filipino"
        | "Vietnamese"
        | "Malaysian"
        | "Nordic"
        | "French"
        | "Spanish"
        | "Russian"
        | "Polish"
        | "Portuguese"
        | "German"
        | "Hindi"
        | "Arabic";
      /** info */
      info?: string;
      /** site */
      site?: string;
      /** PublishersModelUpdateV1Admin */
      admin?: {
        /** approved */
        approved?: boolean;
      };
    };
    PublishersPublicationResponseV1: {
      /** PublishersPublicationResponseV1Publisher */
      publisher?: {
        /** publisher_name */
        publisher_name?: string;
        /** publisher_id */
        publisher_id?: number;
      };
      /** series_list */
      series_list?: {
        /** title */
        title?: string;
        /** series_id */
        series_id?: number;
        /** genres */
        genres?: string[];
        last_updated?: components["schemas"]["TimeV1"];
      }[];
    };
    PublishersSearchRequestV1: {
      /** search */
      search?: string;
      /** added_by */
      added_by?: number;
      /** page */
      page?: number;
      /** perpage */
      perpage?: number;
      /** letter */
      letter?: string;
      /**
       * orderby
       * @enum {string}
       */
      orderby?: "score" | "name" | "series" | "publications" | "type";
      /** pending */
      pending?: boolean;
    };
    PublishersSearchResponseV1: {
      /** total_hits */
      total_hits?: number;
      /** page */
      page?: number;
      /** per_page */
      per_page?: number;
      /** results */
      results?: {
        record?: components["schemas"]["PublishersModelSearchV1"];
        /** hit_name */
        hit_name?: string;
      }[];
    };
    PublishersSeriesListResponseV1: {
      /** series_list */
      series_list?: {
        /** title */
        title?: string;
        /** series_id */
        series_id?: number;
        /** year */
        year?: string;
        last_updated?: components["schemas"]["TimeV1"];
      }[];
      /** publication_list */
      publication_list?: {
        /** publication_name */
        publication_name?: string;
        /** count */
        count?: number;
      }[];
    };
    ReleaseDaysSearchRequestV1: {
      /** page */
      page?: number;
      /** perpage */
      perpage?: number;
      /** include_metadata */
      include_metadata?: boolean;
    };
    ReleaseModelV1: {
      /** id */
      id?: number;
      /** title */
      title?: string;
      /** volume */
      volume?: string;
      /** chapter */
      chapter?: string;
      /** groups */
      groups?: {
        /** name */
        name?: string;
        /** group_id */
        group_id?: number;
      }[];
      /** release_date */
      release_date?: string;
      /** download_notes */
      download_notes?: string;
      /** comment */
      comment?: string;
      time_added?: components["schemas"]["TimeV1"];
      /** ReleaseModelV1Admin */
      admin?: {
        /** approved */
        approved?: boolean;
        /** archived */
        archived?: boolean;
        added_by?: components["schemas"]["UserModelSearchV1"];
      };
    };
    ReleaseModelSearchV1: {
      /** id */
      id?: number;
      /** title */
      title?: string;
      /** volume */
      volume?: string;
      /** chapter */
      chapter?: string;
      /** groups */
      groups?: {
        /** name */
        name?: string;
        /** group_id */
        group_id?: number;
      }[];
      /** release_date */
      release_date?: string;
      time_added?: components["schemas"]["TimeV1"];
    };
    ReleaseModelUpdateV1: {
      /** title */
      title?: string;
      /** volume */
      volume?: string;
      /** chapter */
      chapter?: string;
      /** groups */
      groups?: {
        /** name */
        name?: string;
      }[];
      /** release_date */
      release_date?: string;
      /** download_notes */
      download_notes?: string;
      /** comment */
      comment?: string;
      time_added?: components["schemas"]["TimeUpdateV1"];
      /** ReleaseModelUpdateV1Admin */
      admin?: {
        /** approved */
        approved?: boolean;
        /** archived */
        archived?: boolean;
      };
    };
    ReleaseModerateRequestV1: {
      /** archived */
      archived?: boolean;
      /** disable_paging */
      disable_paging?: boolean;
      /** page */
      page?: number;
      /** perpage */
      perpage?: number;
    };
    ReleaseModerateResponseV1: {
      /** total_hits */
      total_hits?: number;
      /** page */
      page?: number;
      /** per_page */
      per_page?: number;
      /** results */
      results?: {
        record?: components["schemas"]["ReleaseModelV1"];
        /** ReleaseModerateResponseV1ResultsMetadata */
        metadata?: {
          /** series */
          series?: number;
          /** like_releases */
          like_releases?: components["schemas"]["ReleaseModelV1"][];
        };
      }[];
      /** group_info */
      group_info?: {
        /** group_id */
        group_id?: number;
        /** hold */
        hold?: boolean;
      }[];
    };
    ReleaseSearchRequestV1: {
      /** search */
      search?: string;
      /**
       * search_type
       * @enum {string}
       */
      search_type?: "series" | "regular";
      /** added_by */
      added_by?: number;
      /** page */
      page?: number;
      /** perpage */
      perpage?: number;
      /** letter */
      letter?: string;
      /**
       * orderby
       * @enum {string}
       */
      orderby?: "date" | "time" | "title" | "vol" | "chap";
      /** start_date */
      start_date?: string;
      /** end_date */
      end_date?: string;
      /**
       * asc
       * @enum {string}
       */
      asc?: "asc" | "desc";
      /** group_id */
      group_id?: number;
      /** pending */
      pending?: boolean;
      /** include_metadata */
      include_metadata?: boolean;
    };
    ReleaseSearchResponseV1: {
      /** total_hits */
      total_hits?: number;
      /** page */
      page?: number;
      /** per_page */
      per_page?: number;
      /** results */
      results?: {
        record?: components["schemas"]["ReleaseModelSearchV1"];
        /** ReleaseSearchResponseV1ResultsMetadata */
        metadata?: {
          series?: components["schemas"]["SeriesModelSearchV1"];
          user_list?: components["schemas"]["ListsSeriesModelV1"];
          /** user_genre_highlights */
          user_genre_highlights?: {
            /** genre */
            genre?: string;
            /** color */
            color?: string;
          }[];
          /** user_genre_filters */
          user_genre_filters?: string[];
          /** user_group_filters */
          user_group_filters?: string[];
          /** type_filter */
          type_filter?: string;
        };
      }[];
    };
    ReviewCommentModelV1: {
      /** id */
      id?: number;
      /** review_id */
      review_id?: number;
      /** subject */
      subject?: string;
      /** content */
      content?: string;
      /** ReviewCommentModelV1Author */
      author?: {
        /** user_id */
        user_id?: number;
        /** name */
        name?: string;
      };
      /** rating */
      rating?: number;
      time_added?: components["schemas"]["TimeV1"];
      time_updated?: components["schemas"]["TimeV1"];
    };
    ReviewCommentModelUpdateV1: {
      /** subject */
      subject?: string;
      /** content */
      content?: string;
      /** rating */
      rating?: number;
      /** ReviewCommentModelUpdateV1Admin */
      admin?: {
        /** approved */
        approved?: boolean;
      };
    };
    ReviewCommentSearchRequestV1: {
      /** added_by */
      added_by?: number;
      /** page */
      page?: number;
      /** perpage */
      perpage?: number;
    };
    ReviewCommentSearchResponseV1: {
      /** total_hits */
      total_hits?: number;
      /** page */
      page?: number;
      /** per_page */
      per_page?: number;
      /** results */
      results?: {
        record?: components["schemas"]["ReviewCommentModelV1"];
      }[];
    };
    ReviewModelV1: {
      /** id */
      id?: number;
      /** title */
      title?: string;
      /** body */
      body?: string;
      /** ReviewModelV1Author */
      author?: {
        /** user_id */
        user_id?: number;
        /** name */
        name?: string;
      };
      series?: components["schemas"]["SeriesModelSearchV1"];
      /** ReviewModelV1Review */
      review?: {
        /** user */
        user?: number;
        /** plot */
        plot?: number;
        /** drawing */
        drawing?: number;
        /** characters */
        characters?: number;
        /** enjoy */
        enjoy?: number;
        /** overall */
        overall?: number;
      };
      time_added?: components["schemas"]["TimeV1"];
    };
    ReviewModelSearchV1: {
      /** id */
      id?: number;
      /** title */
      title?: string;
      /** body_excerpt */
      body_excerpt?: string;
      /** ReviewModelSearchV1Author */
      author?: {
        /** user_id */
        user_id?: number;
        /** name */
        name?: string;
      };
      series?: components["schemas"]["SeriesModelSearchV1"];
      /** ReviewModelSearchV1Review */
      review?: {
        /** plot */
        plot?: number;
        /** drawing */
        drawing?: number;
        /** characters */
        characters?: number;
        /** enjoy */
        enjoy?: number;
        /** overall */
        overall?: number;
      };
      time_added?: components["schemas"]["TimeV1"];
    };
    ReviewModelUpdateV1: {
      /** title */
      title?: string;
      /** body */
      body?: string;
      /** series_title */
      series_title?: string;
      /** ReviewModelUpdateV1Review */
      review?: {
        /** plot */
        plot?: number;
        /** drawing */
        drawing?: number;
        /** characters */
        characters?: number;
        /** enjoy */
        enjoy?: number;
        /** overall */
        overall?: number;
      };
      /** ReviewModelUpdateV1Admin */
      admin?: {
        /** approved */
        approved?: boolean;
        /** moderated */
        moderated?: boolean;
      };
    };
    ReviewSearchRequestV1: {
      /** search */
      search?: string;
      /** added_by */
      added_by?: number;
      /** series_id */
      series_id?: number;
      /** page */
      page?: number;
      /** perpage */
      perpage?: number;
      /** letter */
      letter?: string;
      /** pending */
      pending?: boolean;
    };
    ReviewSearchResponseV1: {
      /** total_hits */
      total_hits?: number;
      /** page */
      page?: number;
      /** per_page */
      per_page?: number;
      /** results */
      results?: {
        record?: components["schemas"]["ReviewModelSearchV1"];
      }[];
    };
    SeriesCategoryUpdateModelV1: {
      from?: components["schemas"]["CategoriesModelUpdateV1"];
      to?: components["schemas"]["CategoriesModelUpdateV1"];
    };
    SeriesCategoryVoteModelV1: {
      /** category */
      category?: string;
      /** agree */
      agree?: boolean;
    };
    SeriesCategoryVoteDeleteModelV1: {
      /** category */
      category?: string;
    };
    SeriesCommentModelV1: {
      /** id */
      id?: number;
      /** series_id */
      series_id?: number;
      /** subject */
      subject?: string;
      /** content */
      content?: string;
      /** SeriesCommentModelV1Author */
      author?: {
        user_info?: components["schemas"]["UserModelSearchV1"];
        /** name */
        name?: string;
      };
      /** useful */
      useful?: number;
      time_added?: components["schemas"]["TimeV1"];
      time_updated?: components["schemas"]["TimeV1"];
      /** SeriesCommentModelV1Admin */
      admin?: {
        /** moderated */
        moderated?: boolean;
        /** reported */
        reported?: boolean;
        /** report_reason */
        report_reason?: string;
      };
    };
    SeriesCommentModelUpdateV1: {
      /** subject */
      subject?: string;
      /** content */
      content?: string;
      /** SeriesCommentModelUpdateV1Admin */
      admin?: {
        /** moderated */
        moderated?: boolean;
        /** reported */
        reported?: boolean;
      };
    };
    SeriesCommentModerationResponseV1: {
      /** total_hits */
      total_hits?: number;
      /** page */
      page?: number;
      /** per_page */
      per_page?: number;
      /** results */
      results?: {
        record?: components["schemas"]["SeriesCommentModelV1"];
        /** SeriesCommentModerationResponseV1ResultsMetadata */
        metadata?: {
          series?: components["schemas"]["SeriesModelSearchV1"];
          /** author_series_rating */
          author_series_rating?: number;
        };
      }[];
    };
    SeriesCommentReportModelV1: {
      /** report_reason */
      report_reason?: string;
    };
    SeriesCommentSearchRequestV1: {
      /**
       * method
       * @enum {string}
       */
      method?: "useful" | "time_added";
      /** added_by */
      added_by?: number;
      /** page */
      page?: number;
      /** perpage */
      perpage?: number;
    };
    SeriesCommentSearchResponseV1: {
      /** total_hits */
      total_hits?: number;
      /** page */
      page?: number;
      /** per_page */
      per_page?: number;
      /** results */
      results?: {
        record?: components["schemas"]["SeriesCommentModelV1"];
        /** SeriesCommentSearchResponseV1ResultsMetadata */
        metadata?: {
          /** author_series_rating */
          author_series_rating?: number;
          /** current_user_useful_rating */
          current_user_useful_rating?: boolean;
        };
      }[];
    };
    SeriesCommentUsefulModelV1: {
      /** useful */
      useful?: boolean;
    };
    SeriesGroupListResponseV1: {
      /** group_list */
      group_list?: components["schemas"]["GroupsModelSearchV1"][];
      /** release_list */
      release_list?: components["schemas"]["ReleaseModelSearchV1"][];
    };
    SeriesHistoryModelV1: {
      /** change_id */
      change_id?: number;
      /** username */
      username?: string;
      /** action */
      action?: string;
      /** changed */
      changed?: string;
      time_added?: components["schemas"]["TimeV1"];
    };
    SeriesHistorySearchResponseV1: {
      /** total_hits */
      total_hits?: number;
      /** page */
      page?: number;
      /** per_page */
      per_page?: number;
      /** series_title */
      series_title?: string;
      /** results */
      results?: {
        record?: components["schemas"]["SeriesHistoryModelV1"];
      }[];
    };
    SeriesLockModelV1: {
      /** field */
      field?: string;
      /** reason */
      reason?: string;
      /** user_id */
      user_id?: number;
      /** username */
      username?: string;
      time_locked?: components["schemas"]["TimeV1"];
    };
    SeriesLockModelUpdateV1: {
      /** reason */
      reason?: string;
    };
    SeriesModelV1: {
      /** series_id */
      series_id?: number;
      /** title */
      title?: string;
      /** url */
      url?: string;
      /** associated */
      associated?: {
        /** title */
        title?: string;
      }[];
      /** description */
      description?: string;
      image?: components["schemas"]["ImageModelV1"];
      /**
       * type
       * @enum {string}
       */
      type?:
        | "Artbook"
        | "Doujinshi"
        | "Drama CD"
        | "Filipino"
        | "Indonesian"
        | "Manga"
        | "Manhwa"
        | "Manhua"
        | "Novel"
        | "OEL"
        | "Thai"
        | "Vietnamese"
        | "Malaysian"
        | "Nordic"
        | "French"
        | "Spanish";
      /** year */
      year?: string;
      /** bayesian_rating */
      bayesian_rating?: number;
      /** rating_votes */
      rating_votes?: number;
      /** genres */
      genres?: {
        /** genre */
        genre?: string;
      }[];
      /** categories */
      categories?: components["schemas"]["CategoriesModelV1"][];
      /** latest_chapter */
      latest_chapter?: number;
      /** forum_id */
      forum_id?: number;
      /** status */
      status?: string;
      /** licensed */
      licensed?: boolean;
      /** completed */
      completed?: boolean;
      /** SeriesModelV1Anime */
      anime?: {
        /** start */
        start?: string;
        /** end */
        end?: string;
      };
      /** related_series */
      related_series?: {
        /** relation_id */
        relation_id?: number;
        /**
         * relation_type
         * @enum {string}
         */
        relation_type:
          | "Prequel"
          | "Sequel"
          | "Side Story"
          | "Spin-Off"
          | "Adapted From"
          | "Alternate Story"
          | "Main Story";
        /** related_series_id */
        related_series_id: number;
        /** related_series_name */
        related_series_name?: string;
        /** triggered_by_relation_id */
        triggered_by_relation_id?: number;
      }[];
      /** authors */
      authors?: {
        /** name */
        name?: string;
        /** author_id */
        author_id?: number;
        /**
         * type
         * @enum {string}
         */
        type?: "Author" | "Artist";
      }[];
      /** publishers */
      publishers?: {
        /** publisher_name */
        publisher_name?: string;
        /** publisher_id */
        publisher_id?: number;
        /**
         * type
         * @enum {string}
         */
        type?: "Original" | "English";
        /** notes */
        notes?: string;
      }[];
      /** publications */
      publications?: {
        /** publication_name */
        publication_name?: string;
        /** publisher_name */
        publisher_name?: string;
        /** publisher_id */
        publisher_id?: string;
      }[];
      /** recommendations */
      recommendations?: components["schemas"]["SeriesRecommendationsModelV1"][];
      /** category_recommendations */
      category_recommendations?: components["schemas"]["SeriesRecommendationsModelV1"][];
      /** SeriesModelV1Rank */
      rank?: {
        /** SeriesModelV1RankPosition */
        position?: {
          /** week */
          week?: number;
          /** month */
          month?: number;
          /** three_months */
          three_months?: number;
          /** six_months */
          six_months?: number;
          /** year */
          year?: number;
        };
        /** SeriesModelV1RankOldPosition */
        old_position?: {
          /** week */
          week?: number;
          /** month */
          month?: number;
          /** three_months */
          three_months?: number;
          /** six_months */
          six_months?: number;
          /** year */
          year?: number;
        };
        /** SeriesModelV1RankLists */
        lists?: {
          /** reading */
          reading?: number;
          /** wish */
          wish?: number;
          /** complete */
          complete?: number;
          /** unfinished */
          unfinished?: number;
          /** custom */
          custom?: number;
        };
      };
      last_updated?: components["schemas"]["TimeV1"];
      /** SeriesModelV1Admin */
      admin?: {
        added_by?: components["schemas"]["UserModelSearchV1"];
        /** approved */
        approved?: boolean;
      };
    };
    SeriesModelSearchV1: {
      /** series_id */
      series_id?: number;
      /** title */
      title?: string;
      /** url */
      url?: string;
      /** description */
      description?: string;
      image?: components["schemas"]["ImageModelV1"];
      /**
       * type
       * @enum {string}
       */
      type?:
        | "Artbook"
        | "Doujinshi"
        | "Drama CD"
        | "Filipino"
        | "Indonesian"
        | "Manga"
        | "Manhwa"
        | "Manhua"
        | "Novel"
        | "OEL"
        | "Thai"
        | "Vietnamese"
        | "Malaysian"
        | "Nordic"
        | "French"
        | "Spanish";
      /** year */
      year?: string;
      /** bayesian_rating */
      bayesian_rating?: number;
      /** rating_votes */
      rating_votes?: number;
      /** genres */
      genres?: {
        /** genre */
        genre?: string;
      }[];
      /** latest_chapter */
      latest_chapter?: number;
      /** SeriesModelSearchV1Rank */
      rank?: {
        /** SeriesModelSearchV1RankPosition */
        position?: {
          /** week */
          week?: number;
          /** month */
          month?: number;
          /** three_months */
          three_months?: number;
          /** six_months */
          six_months?: number;
          /** year */
          year?: number;
        };
        /** SeriesModelSearchV1RankOldPosition */
        old_position?: {
          /** week */
          week?: number;
          /** month */
          month?: number;
          /** three_months */
          three_months?: number;
          /** six_months */
          six_months?: number;
          /** year */
          year?: number;
        };
        /** SeriesModelSearchV1RankLists */
        lists?: {
          /** reading */
          reading?: number;
          /** wish */
          wish?: number;
          /** complete */
          complete?: number;
          /** unfinished */
          unfinished?: number;
          /** custom */
          custom?: number;
        };
      };
      last_updated?: components["schemas"]["TimeV1"];
      /** SeriesModelSearchV1Admin */
      admin?: {
        added_by?: components["schemas"]["UserModelSearchV1"];
        /** approved */
        approved?: boolean;
      };
    };
    SeriesModelUpdateV1: {
      /** title */
      title?: string;
      /** associated */
      associated?: {
        /** title */
        title?: string;
      }[];
      /** description */
      description?: string;
      /**
       * type
       * @enum {string}
       */
      type?:
        | "Artbook"
        | "Doujinshi"
        | "Drama CD"
        | "Filipino"
        | "Indonesian"
        | "Manga"
        | "Manhwa"
        | "Manhua"
        | "Novel"
        | "OEL"
        | "Thai"
        | "Vietnamese"
        | "Malaysian"
        | "Nordic"
        | "French"
        | "Spanish";
      /** year */
      year?: string;
      /** genres */
      genres?: {
        /** genre */
        genre?: string;
      }[];
      /** categories */
      categories?: components["schemas"]["CategoriesModelUpdateV1"][];
      /** status */
      status?: string;
      /** licensed */
      licensed?: boolean;
      /** completed */
      completed?: boolean;
      /** SeriesModelUpdateV1Anime */
      anime?: {
        /** start */
        start?: string;
        /** end */
        end?: string;
      };
      /** related_series */
      related_series?: {
        /**
         * relation_type
         * @enum {string}
         */
        relation_type:
          | "Prequel"
          | "Sequel"
          | "Side Story"
          | "Spin-Off"
          | "Adapted From"
          | "Alternate Story"
          | "Main Story";
        /** related_series_id */
        related_series_id: number;
      }[];
      /** authors */
      authors?: {
        /** name */
        name?: string;
        /**
         * type
         * @enum {string}
         */
        type?: "Author" | "Artist";
      }[];
      /** publishers */
      publishers?: {
        /** publisher_name */
        publisher_name?: string;
        /**
         * type
         * @enum {string}
         */
        type?: "Original" | "English";
        /** notes */
        notes?: string;
      }[];
      /** publications */
      publications?: {
        /** publication_name */
        publication_name?: string;
        /** publisher_name */
        publisher_name?: string;
      }[];
      /** SeriesModelUpdateV1Admin */
      admin?: {
        /** approved */
        approved?: boolean;
      };
    };
    SeriesRatingModelV1: {
      /** rating */
      rating: number;
      last_updated?: components["schemas"]["TimeV1"];
    };
    SeriesRatingRainbowModelV1: {
      /** average_rating */
      average_rating?: number;
      /** rainbow */
      rainbow?: {
        /** rating */
        rating?: number;
        /** count */
        count?: number;
      }[];
    };
    SeriesRecommendationsModelV1: {
      /** series_name */
      series_name?: string;
      /** series_id */
      series_id?: number;
      /** weight */
      weight?: number;
    };
    SeriesSearchRequestV1: {
      /** search */
      search?: string;
      /** added_by */
      added_by?: number;
      /**
       * stype
       * @enum {string}
       */
      stype?: "title" | "description";
      /**
       * licensed
       * @enum {string}
       */
      licensed?: "yes" | "no";
      /** type */
      type?: string[];
      /** year */
      year?: string;
      /** filter_types */
      filter_types?: string[];
      /** category */
      category?: string[];
      /** pubname */
      pubname?: string;
      /**
       * filter
       * @enum {string}
       */
      filter?:
        | "scanlated"
        | "completed"
        | "oneshots"
        | "no_oneshots"
        | "some_releases"
        | "no_releases";
      /**
       * filters
       * @description Meant to replace 'filter', it lets you specify multiple filters as an array of strings
       */
      filters?: (
        | "scanlated"
        | "completed"
        | "oneshots"
        | "no_oneshots"
        | "some_releases"
        | "no_releases"
      )[];
      /** list */
      list?: string;
      /** page */
      page?: number;
      /** perpage */
      perpage?: number;
      /** letter */
      letter?: string;
      /** genre */
      genre?: string[];
      /** exclude_genre */
      exclude_genre?: string[];
      /**
       * orderby
       * @enum {string}
       */
      orderby?:
        | "score"
        | "title"
        | "rank"
        | "rating"
        | "year"
        | "date_added"
        | "week_pos"
        | "month1_pos"
        | "month3_pos"
        | "month6_pos"
        | "year_pos"
        | "list_reading"
        | "list_wish"
        | "list_complete"
        | "list_unfinished";
      /** pending */
      pending?: boolean;
      /** include_rank_metadata */
      include_rank_metadata?: boolean;
      /** exclude_filtered_genres */
      exclude_filtered_genres?: boolean;
    };
    SeriesSearchResponseV1: {
      /** total_hits */
      total_hits?: number;
      /** page */
      page?: number;
      /** per_page */
      per_page?: number;
      /** results */
      results?: {
        record?: components["schemas"]["SeriesModelSearchV1"];
        /** hit_title */
        hit_title?: string;
        /** SeriesSearchResponseV1ResultsMetadata */
        metadata?: {
          user_list?: components["schemas"]["ListsSeriesModelV1"];
          /** user_genre_highlights */
          user_genre_highlights?: {
            /** genre */
            genre?: string;
            /** color */
            color?: string;
          }[];
        };
      }[];
    };
    TimeV1: {
      /** timestamp */
      timestamp?: number;
      /**
       * as_rfc3339
       * Format: date-time
       */
      as_rfc3339?: string;
      /** as_string */
      as_string?: string;
    };
    TimeUpdateV1: {
      /** timestamp */
      timestamp?: number;
    };
    UserChangeRequestModelV1: {
      /** id */
      id?: number;
      /** body */
      body?: string;
      added_by?: components["schemas"]["UserModelSearchV1"];
      time_added?: components["schemas"]["TimeV1"];
    };
    UserChangeRequestModelUpdateV1: {
      /** body */
      body?: string;
      /** archived */
      archived?: boolean;
    };
    UserChangeRequestSearchResponseV1: {
      /** total_hits */
      total_hits?: number;
      /** page */
      page?: number;
      /** per_page */
      per_page?: number;
      /** results */
      results?: {
        record?: components["schemas"]["UserChangeRequestModelV1"];
      }[];
    };
    UserGenreFilterModelV1: {
      /** genre_id */
      genre_id?: number;
      /** genre_name */
      genre_name?: string;
    };
    UserGenreHighlightModelV1: {
      /** genre_id */
      genre_id?: number;
      /** genre_name */
      genre_name?: string;
      /** color */
      color?: string;
    };
    UserGenreHighlightModelUpdateV1: {
      /** color */
      color?: string;
    };
    UserGroupFilterModelV1: {
      /** group_id */
      group_id?: number;
      /** group_name */
      group_name?: string;
    };
    UserGroupModelV1: {
      /** id */
      id?: string;
      /** name */
      name: string;
      /** description */
      description: string;
    };
    UserGroupModelUpdateV1: {
      /** name */
      name: string;
      /** description */
      description: string;
    };
    UserModelV1: {
      /** user_id */
      user_id?: number;
      /** username */
      username?: string;
      /** url */
      url?: string;
      /** email */
      email?: string;
      avatar?: components["schemas"]["AvatarModelV1"];
      time_joined?: components["schemas"]["TimeV1"];
      last_active_time?: components["schemas"]["TimeV1"];
      /**
       * gender
       * @enum {string}
       */
      gender?:
        | "N/A"
        | "Male"
        | "Female"
        | "Alien"
        | "Hermaphrodite"
        | "Non-binary"
        | "Other";
      birthday?: components["schemas"]["BirthdayModelV1"];
      /** age */
      age?: number;
      /** timezone */
      timezone?: number;
      /** signature */
      signature?: string;
      /** location */
      location?: string;
      /** forum_title */
      forum_title?: string;
      /** folding_at_home */
      folding_at_home?: boolean;
      /** UserModelV1Profile */
      profile?: {
        /** per_page */
        per_page?: number;
        /** invisible */
        invisible?: boolean;
        /** hide_birthday */
        hide_birthday?: boolean;
        /** hide_categories */
        hide_categories?: boolean;
        /** filter_types */
        filter_types?: (
          | "Artbook"
          | "Doujinshi"
          | "Drama CD"
          | "Filipino"
          | "Indonesian"
          | "Manga"
          | "Manhwa"
          | "Manhua"
          | "Novel"
          | "OEL"
          | "Thai"
          | "Vietnamese"
          | "Malaysian"
          | "Nordic"
          | "French"
          | "Spanish"
        )[];
        /** UserModelV1ProfileUpgrade */
        upgrade?: {
          /** requested */
          requested?: boolean;
          /** reason */
          reason?: string;
        };
        /** age18_verified */
        age18_verified?: boolean;
      };
      /** UserModelV1Stats */
      stats?: {
        /** forum_posts */
        forum_posts?: number;
        /** added_authors */
        added_authors?: number;
        /** added_groups */
        added_groups?: number;
        /** added_publishers */
        added_publishers?: number;
        /** added_releases */
        added_releases?: number;
        /** added_series */
        added_series?: number;
        /** series_edits */
        series_edits?: number;
        /** author_edits */
        author_edits?: number;
        /** publisher_edits */
        publisher_edits?: number;
        /** added_tags */
        added_tags?: number;
        /** UserModelV1StatsModeration */
        moderation?: {
          /** UserModelV1StatsModerationReleases */
          releases?: {
            /** approved */
            approved?: number;
            /** rejected */
            rejected?: number;
            /** deleted */
            deleted?: number;
          };
          /** UserModelV1StatsModerationSeries */
          series?: {
            /** approved */
            approved?: number;
            /** rejected */
            rejected?: number;
            /** deleted */
            deleted?: number;
          };
          /** UserModelV1StatsModerationPublishers */
          publishers?: {
            /** approved */
            approved?: number;
            /** rejected */
            rejected?: number;
            /** deleted */
            deleted?: number;
          };
          /** UserModelV1StatsModerationGroups */
          groups?: {
            /** approved */
            approved?: number;
            /** rejected */
            rejected?: number;
            /** deleted */
            deleted?: number;
          };
          /** UserModelV1StatsModerationAuthors */
          authors?: {
            /** approved */
            approved?: number;
            /** rejected */
            rejected?: number;
            /** deleted */
            deleted?: number;
          };
          last_action?: components["schemas"]["TimeV1"];
        };
      };
      /** UserModelV1Admin */
      admin?: {
        /** is_admin */
        is_admin?: boolean;
        /** registration_ip */
        registration_ip?: string;
        /** UserModelV1AdminPermissions */
        permissions?: {
          /** p_add_releases */
          p_add_releases?: boolean;
          /** p_edit_users */
          p_edit_users?: boolean;
          /** p_edit_groups */
          p_edit_groups?: boolean;
          /** p_edit_poll */
          p_edit_poll?: boolean;
          /** p_edit_series */
          p_edit_series?: boolean;
          /** p_edit_reviews */
          p_edit_reviews?: boolean;
          /** p_edit_news */
          p_edit_news?: boolean;
          /** p_edit_affiliates */
          p_edit_affiliates?: boolean;
          /** p_edit_aboutus */
          p_edit_aboutus?: boolean;
          /** p_view_log */
          p_view_log?: boolean;
          /** p_edit_config */
          p_edit_config?: boolean;
          /** p_view_stats */
          p_view_stats?: boolean;
          /** p_edit_genre */
          p_edit_genre?: boolean;
          /** p_edit_authors */
          p_edit_authors?: boolean;
          /** p_edit_publishers */
          p_edit_publishers?: boolean;
          /** p_edit_partial_users */
          p_edit_partial_users?: boolean;
        };
        last_series_update?: components["schemas"]["TimeV1"];
        /** approved */
        approved?: boolean;
        /** email_approved */
        email_approved?: boolean;
        /** forum_admin */
        forum_admin?: boolean;
        /** registration_reason */
        registration_reason?: string;
        /** UserModelV1AdminUpgrade */
        upgrade?: {
          /** banned */
          banned?: boolean;
        };
        /** banned */
        banned?: boolean;
      };
      /** user_group */
      user_group?: string;
      /** user_group_name */
      user_group_name?: string;
    };
    UserModelSearchV1: {
      /** user_id */
      user_id?: number;
      /** username */
      username?: string;
      /** url */
      url?: string;
      avatar?: components["schemas"]["AvatarModelSearchV1"];
      time_joined?: components["schemas"]["TimeV1"];
      /** signature */
      signature?: string;
      /** forum_title */
      forum_title?: string;
      /** folding_at_home */
      folding_at_home?: boolean;
      /** UserModelSearchV1Profile */
      profile?: {
        /** UserModelSearchV1ProfileUpgrade */
        upgrade?: {
          /** requested */
          requested?: boolean;
          /** reason */
          reason?: string;
        };
      };
      /** UserModelSearchV1Stats */
      stats?: {
        /** forum_posts */
        forum_posts?: number;
        /** added_authors */
        added_authors?: number;
        /** added_groups */
        added_groups?: number;
        /** added_publishers */
        added_publishers?: number;
        /** added_releases */
        added_releases?: number;
        /** added_series */
        added_series?: number;
      };
      /** user_group */
      user_group?: string;
      /** user_group_name */
      user_group_name?: string;
    };
    UserModelUpdateV1: {
      /** username */
      username?: string;
      /** email */
      email?: string;
      /**
       * password
       * Format: password
       */
      password?: string;
      /** new_avatar_id */
      new_avatar_id?: number;
      /**
       * gender
       * @enum {string}
       */
      gender?:
        | "N/A"
        | "Male"
        | "Female"
        | "Alien"
        | "Hermaphrodite"
        | "Non-binary"
        | "Other";
      birthday?: components["schemas"]["BirthdayModelV1"];
      /** timezone */
      timezone?: number;
      /** signature */
      signature?: string;
      /** location */
      location?: string;
      /** forum_title */
      forum_title?: string;
      /** folding_at_home */
      folding_at_home?: boolean;
      /** UserModelUpdateV1Profile */
      profile?: {
        /** per_page */
        per_page?: number;
        /** invisible */
        invisible?: boolean;
        /** hide_birthday */
        hide_birthday?: boolean;
        /** hide_categories */
        hide_categories?: boolean;
        /** filter_types */
        filter_types?: (
          | "Artbook"
          | "Doujinshi"
          | "Drama CD"
          | "Filipino"
          | "Indonesian"
          | "Manga"
          | "Manhwa"
          | "Manhua"
          | "Novel"
          | "OEL"
          | "Thai"
          | "Vietnamese"
          | "Malaysian"
          | "Nordic"
          | "French"
          | "Spanish"
        )[];
        /** UserModelUpdateV1ProfileUpgrade */
        upgrade?: {
          /** requested */
          requested?: boolean;
          /** reason */
          reason?: string;
        };
        /** age18_verified */
        age18_verified?: boolean;
      };
      /** UserModelUpdateV1Admin */
      admin?: {
        /** is_admin */
        is_admin?: boolean;
        /** UserModelUpdateV1AdminPermissions */
        permissions?: {
          /** p_add_releases */
          p_add_releases?: boolean;
          /** p_edit_users */
          p_edit_users?: boolean;
          /** p_edit_groups */
          p_edit_groups?: boolean;
          /** p_edit_poll */
          p_edit_poll?: boolean;
          /** p_edit_series */
          p_edit_series?: boolean;
          /** p_edit_reviews */
          p_edit_reviews?: boolean;
          /** p_edit_news */
          p_edit_news?: boolean;
          /** p_edit_affiliates */
          p_edit_affiliates?: boolean;
          /** p_edit_aboutus */
          p_edit_aboutus?: boolean;
          /** p_view_log */
          p_view_log?: boolean;
          /** p_edit_config */
          p_edit_config?: boolean;
          /** p_view_stats */
          p_view_stats?: boolean;
          /** p_edit_genre */
          p_edit_genre?: boolean;
          /** p_edit_authors */
          p_edit_authors?: boolean;
          /** p_edit_publishers */
          p_edit_publishers?: boolean;
          /** p_edit_partial_users */
          p_edit_partial_users?: boolean;
        };
        /** approved */
        approved?: boolean;
        /** email_approved */
        email_approved?: boolean;
        /** forum_admin */
        forum_admin?: boolean;
        /** UserModelUpdateV1AdminUpgrade */
        upgrade?: {
          /** banned */
          banned?: boolean;
        };
        /** banned */
        banned?: boolean;
      };
      /** user_group */
      user_group?: string;
    };
    UserModelUpdatePasswordV1: {
      /**
       * password
       * Format: password
       */
      password?: string;
    };
    UserModelRegisterV1: {
      /** username */
      username?: string;
      /** email */
      email?: string;
      /**
       * password
       * Format: password
       */
      password?: string;
    };
    UserSearchRequestV1: {
      /** search */
      search?: string;
      /** page */
      page?: number;
      /** perpage */
      perpage?: number;
      /** letter */
      letter?: string;
      /**
       * orderby
       * @enum {string}
       */
      orderby?:
        | "username"
        | "time_added"
        | "forum_posts"
        | "added_authors"
        | "added_releases"
        | "added_groups"
        | "added_publishers"
        | "added_series";
      /**
       * asc
       * @enum {string}
       */
      asc?: "asc" | "desc";
    };
    UserSearchResponseV1: {
      /** total_hits */
      total_hits?: number;
      /** page */
      page?: number;
      /** per_page */
      per_page?: number;
      /** results */
      results?: {
        record?: components["schemas"]["UserModelSearchV1"];
      }[];
    };
    UserSubscribedTopicModelV1: {
      /** topic_id */
      topic_id?: number;
      topic?: components["schemas"]["ForumTopicModelSearchV1"];
      time_subscribed_since?: components["schemas"]["TimeV1"];
    };
  };
  responses: {
    /** @description User or warn does not exist */
    404: {
      content: never;
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /** add a category */
  addAboutusCategory: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AboutusCategoryModelUpdateV1"];
      };
    };
    responses: {
      /** @description Category was added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
    };
  };
  /** returns a single category */
  retrieveAboutusCategory: {
    parameters: {
      query?: {
        /** @description Output fields in unrendered form for editing */
        unrenderedFields?: boolean;
      };
      path: {
        /** @description Aboutus Category id */
        category_id: number;
      };
    };
    responses: {
      /** @description Return category record */
      200: {
        content: {
          "application/json": components["schemas"]["AboutusCategoryModelV1"];
        };
      };
      /** @description Category not found */
      404: {
        content: never;
      };
    };
  };
  /** remove a category */
  deleteAboutusCategory: {
    parameters: {
      path: {
        /** @description Aboutus Category id */
        category_id: number;
      };
    };
    responses: {
      /** @description Category was removed */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Category does not have correct role */
      401: {
        content: never;
      };
      /** @description Category does not exist */
      404: {
        content: never;
      };
    };
  };
  /** update a category */
  updateAboutusCategory: {
    parameters: {
      path: {
        /** @description id of category */
        category_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AboutusCategoryModelUpdateV1"];
      };
    };
    responses: {
      /** @description Category was updated */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Category not found */
      404: {
        content: never;
      };
    };
  };
  /** returns categories and users */
  retrieveAboutusCategoriesAndUsers: {
    responses: {
      /** @description List of categories and users */
      200: {
        content: {
          "application/json": components["schemas"]["AboutusCategoryModelV1"][];
        };
      };
    };
  };
  /** returns description of site */
  retrieveAboutusDescription: {
    parameters: {
      query?: {
        /** @description Output fields in unrendered form for editing */
        unrenderedFields?: boolean;
      };
    };
    responses: {
      /** @description Description of the site */
      200: {
        content: {
          "application/json": components["schemas"]["AboutusDescriptionModelV1"];
        };
      };
    };
  };
  /** update description of site */
  updateAboutusDescription: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AboutusDescriptionModelV1"];
      };
    };
    responses: {
      /** @description Description of the site updated */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Error updating description */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have appropriate role */
      401: {
        content: never;
      };
    };
  };
  /** reorder aboutus */
  reorderAboutus: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AboutusCategoryReorderModelV1"][];
      };
    };
    responses: {
      /** @description Categories and users were reordered */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
    };
  };
  /** add a user to a category */
  addAboutusCategoryUser: {
    parameters: {
      path: {
        /** @description Aboutus Category id */
        category_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AboutusUserModelUpdateV1"];
      };
    };
    responses: {
      /** @description User was added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Category does not exist */
      404: {
        content: never;
      };
    };
  };
  /** remove a user from a category */
  deleteAboutusCategoryUser: {
    parameters: {
      path: {
        /** @description Aboutus Category id */
        category_id: number;
        /** @description Aboutus Category User Entry id */
        entry_id: number;
      };
    };
    responses: {
      /** @description User was removed */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description User does not exist */
      404: {
        content: never;
      };
    };
  };
  /** retrieve the public captcha key */
  captcha: {
    responses: {
      /** @description Return captcha record */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
    };
  };
  /** confirm deletion of your account */
  confirmDeleteAccount: {
    parameters: {
      path: {
        /** @description auth hash from email confirmation */
        auth_hash: string;
      };
    };
    responses: {
      /** @description Account was deleted */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
    };
  };
  /** delete your account */
  deleteAccount: {
    parameters: {
      path: {
        /** @description response of captcha */
        captcha_response: string;
      };
    };
    responses: {
      /** @description Account was deleted */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** update a password change using an auth hash */
  confirmAndChangePassword: {
    parameters: {
      path: {
        /** @description auth hash from email confirmation */
        auth_hash: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserModelUpdatePasswordV1"];
      };
    };
    responses: {
      /** @description Password was changed */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
    };
  };
  /** send a forgotten password email */
  forgotPassword: {
    parameters: {
      path: {
        /** @description response of captcha */
        captcha_response: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AccountForgotPassModelV1"];
      };
    };
    responses: {
      /** @description Email was sent */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
    };
  };
  /** create a session token */
  login: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AccountLoginModelV1"];
      };
    };
    responses: {
      /** @description Login successful */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Invalid credentials or user error */
      401: {
        content: never;
      };
    };
  };
  /** remove a session token */
  logout: {
    responses: {
      /** @description Logout successful */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User is not logged in */
      401: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
    };
  };
  /** get the profile for the current user */
  profile: {
    responses: {
      /** @description Return user record */
      200: {
        content: {
          "application/json": components["schemas"]["UserModelV1"];
        };
      };
      /** @description User required */
      401: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User not found */
      404: {
        content: never;
      };
    };
  };
  /** confirm a new member registration */
  confirmRegistration: {
    parameters: {
      path: {
        /** @description auth hash from email confirmation */
        auth_hash: string;
      };
    };
    responses: {
      /** @description Member was confirmed */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
    };
  };
  /** register a new member */
  registerMember: {
    parameters: {
      path: {
        /** @description response of captcha */
        captcha_response: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserModelRegisterV1"];
      };
    };
    responses: {
      /** @description Member was added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
    };
  };
  /** send an auth email to a user */
  resendAuthEmail: {
    parameters: {
      path: {
        /** @description Member id */
        id: number;
      };
    };
    responses: {
      /** @description Auth email was sent */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
    };
  };
  /** send a forgotten password email to a user */
  sendForgotEmail: {
    parameters: {
      path: {
        /** @description Member id */
        id: number;
      };
    };
    responses: {
      /** @description Auth email was sent */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
    };
  };
  /** add an author */
  addAuthor: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthorsModelUpdateV1"];
      };
    };
    responses: {
      /** @description Author was added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** get a specific author */
  retrieveAuthor: {
    parameters: {
      query?: {
        /** @description Output fields in unrendered form for editing */
        unrenderedFields?: boolean;
      };
      path: {
        /** @description Author id */
        id: number;
      };
    };
    responses: {
      /** @description Return author record */
      200: {
        content: {
          "application/json": components["schemas"]["AuthorsModelV1"];
        };
      };
      /** @description Author not found */
      404: {
        content: never;
      };
    };
  };
  /** delete an author */
  deleteAuthor: {
    parameters: {
      path: {
        /** @description id of author */
        id: number;
      };
    };
    responses: {
      /** @description Author delete transaction submitted */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Author not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** update an author */
  updateAuthor: {
    parameters: {
      path: {
        /** @description id of author */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthorsModelUpdateV1"];
      };
    };
    responses: {
      /** @description Author was updated */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Field is locked */
      403: {
        content: never;
      };
      /** @description Author not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** get locks for a specific author */
  retrieveAuthorLocks: {
    parameters: {
      path: {
        /** @description Author id */
        id: number;
      };
    };
    responses: {
      /** @description Return author lock records */
      200: {
        content: {
          "application/json": components["schemas"]["AuthorsLockModelV1"][];
        };
      };
      /** @description Author not found */
      404: {
        content: never;
      };
    };
  };
  /** lock a field of an author */
  lockAuthorField: {
    parameters: {
      path: {
        /** @description id of author */
        id: number;
        /** @description field name */
        item: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthorsLockModelUpdateV1"];
      };
    };
    responses: {
      /** @description Field was locked */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Service or validation error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Author not found */
      404: {
        content: never;
      };
      /** @description State Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
    };
  };
  /** unlock a field of an author */
  unlockAuthorField: {
    parameters: {
      path: {
        /** @description id of author */
        id: number;
        /** @description field name */
        item: string;
      };
    };
    responses: {
      /** @description Field was unlocked */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Author not found */
      404: {
        content: never;
      };
      /** @description State Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
    };
  };
  /** search authors */
  searchAuthorsPost: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthorsSearchRequestV1"];
      };
    };
    responses: {
      /** @description List of authors */
      200: {
        content: {
          "application/json": components["schemas"]["AuthorsSearchResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
    };
  };
  /** get the list of series for a specific author */
  retrieveAuthorSeries: {
    parameters: {
      path: {
        /** @description Author id */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthorsSeriesListRequestV1"];
      };
    };
    responses: {
      /** @description Return series list */
      200: {
        content: {
          "application/json": components["schemas"]["AuthorsSeriesListResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Author not found */
      404: {
        content: never;
      };
    };
  };
  /** update the image of an author */
  updateImage: {
    parameters: {
      path: {
        /** @description id of author */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          /**
           * Format: binary
           * @description Image to update
           */
          image?: string;
        };
      };
    };
    responses: {
      /** @description Image was updated */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Field is locked */
      403: {
        content: never;
      };
      /** @description Author not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** delete the image of an author */
  deleteImage: {
    parameters: {
      path: {
        /** @description id of author */
        id: number;
      };
    };
    responses: {
      /** @description Image was deleted */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Author not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** combine two categories across the database */
  bulkCombineSeriesCategories: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SeriesCategoryUpdateModelV1"];
      };
    };
    responses: {
      /** @description Transaction has started */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** delete a category across the database */
  bulkDeleteSeriesCategories: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CategoriesModelUpdateV1"];
      };
    };
    responses: {
      /** @description Transaction has started */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** find a category by prefix */
  findCategoryByPrefix: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CategoriesModelUpdateV1"];
      };
    };
    responses: {
      /** @description Return categories records */
      200: {
        content: {
          "application/json": components["schemas"]["CategoriesModelV1"][];
        };
      };
    };
  };
  /** find a category by name */
  findCategoryByExact: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CategoriesModelUpdateV1"];
      };
    };
    responses: {
      /** @description Return categories record */
      200: {
        content: {
          "application/json": components["schemas"]["CategoriesModelV1"];
        };
      };
      /** @description Category not found */
      404: {
        content: never;
      };
    };
  };
  /** search categories */
  searchCategoriesPost: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CategoriesSearchRequestV1"];
      };
    };
    responses: {
      /** @description Return categories records */
      200: {
        content: {
          "application/json": components["schemas"]["CategoriesSearchResponseV1"];
        };
      };
    };
  };
  /** add an convo */
  addConvo: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConvoModelAddV1"];
      };
    };
    responses: {
      /** @description Convo was added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** abandon convos in bulk */
  abandonConvoBulk: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConvoBulkModelV1"];
      };
    };
    responses: {
      /** @description Bulk abandon result */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
    };
  };
  /** delete convos in bulk */
  deleteConvoBulk: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConvoBulkModelV1"];
      };
    };
    responses: {
      /** @description Bulk deletion result */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
    };
  };
  /** get a specific convo */
  retrieveConvo: {
    parameters: {
      query?: {
        /** @description Output fields in unrendered form for editing */
        unrenderedFields?: boolean;
      };
      path: {
        /** @description Convo id */
        id: number;
      };
    };
    responses: {
      /** @description Return convo record */
      200: {
        content: {
          "application/json": components["schemas"]["ConvoModelV1"];
        };
      };
      /** @description Convo not found */
      404: {
        content: never;
      };
    };
  };
  /** delete a convo */
  deleteConvo: {
    parameters: {
      path: {
        /** @description Convo id */
        id: number;
      };
    };
    responses: {
      /** @description Convo was deleted */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Convo not found */
      404: {
        content: never;
      };
    };
  };
  /** update a convo */
  updateConvo: {
    parameters: {
      path: {
        /** @description Convo id */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConvoModelUpdateV1"];
      };
    };
    responses: {
      /** @description Convo was updated */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** return whether the user is ignored */
  isUserIgnored: {
    parameters: {
      path: {
        /** @description User id */
        user_id: number;
      };
    };
    responses: {
      /** @description User ignore record */
      200: {
        content: {
          "application/json": components["schemas"]["ConvoUserIgnoreModelV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not exists */
      404: {
        content: never;
      };
    };
  };
  /** ignore a user */
  ignoreUser: {
    parameters: {
      path: {
        /** @description User id */
        user_id: number;
      };
    };
    responses: {
      /** @description User was ignored */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not exists */
      404: {
        content: never;
      };
    };
  };
  /** remove ignore for a user */
  unIgnoreUser: {
    parameters: {
      path: {
        /** @description User id */
        user_id: number;
      };
    };
    responses: {
      /** @description User ignore was removed */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not exist */
      404: {
        content: never;
      };
    };
  };
  /** display unread messages */
  convoInbox: {
    responses: {
      /** @description List of convos */
      200: {
        content: {
          "application/json": components["schemas"]["ConvoSearchResponseV1"];
        };
      };
    };
  };
  /** retrieve number of unread messages */
  convoInboxCount: {
    responses: {
      /** @description Return number of new convos */
      200: {
        content: {
          "application/json": components["schemas"]["ConvoSearchResponseV1"];
        };
      };
    };
  };
  /** display sent messages */
  convoSent: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PerPageSearchRequestV1"];
      };
    };
    responses: {
      /** @description List of convos */
      200: {
        content: {
          "application/json": components["schemas"]["ConvoSearchResponseV1"];
        };
      };
    };
  };
  /** display received (and read) messages */
  convoReceived: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PerPageSearchRequestV1"];
      };
    };
    responses: {
      /** @description List of convos */
      200: {
        content: {
          "application/json": components["schemas"]["ConvoSearchResponseV1"];
        };
      };
    };
  };
  /** add a message to a convo */
  addConvoMessage: {
    parameters: {
      path: {
        /** @description Convo id */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConvoMessageModelUpdateV1"];
      };
    };
    responses: {
      /** @description Message was added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** list convo messages */
  listConvoMessages: {
    parameters: {
      path: {
        /** @description Convo id */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConvoMessageListRequestV1"];
      };
    };
    responses: {
      /** @description List of convo messages */
      200: {
        content: {
          "application/json": components["schemas"]["ConvoMessageSearchResponseV1"];
        };
      };
      /** @description Convo not found */
      404: {
        content: never;
      };
    };
  };
  /** get a specific convo message */
  retrieveConvoMessage: {
    parameters: {
      query?: {
        /** @description Output fields in unrendered form for editing */
        unrenderedFields?: boolean;
      };
      path: {
        /** @description Convo id */
        id: number;
        /** @description Convo message id */
        message_id: number;
      };
    };
    responses: {
      /** @description Return convo message record */
      200: {
        content: {
          "application/json": components["schemas"]["ConvoMessageModelV1"];
        };
      };
      /** @description Convo message not found */
      404: {
        content: never;
      };
    };
  };
  /** update a convo message */
  updateConvoMessage: {
    parameters: {
      path: {
        /** @description Convo id */
        id: number;
        /** @description Convo message id */
        message_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConvoMessageModelUpdateV1"];
      };
    };
    responses: {
      /** @description Message was updated */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Permission error */
      403: {
        content: never;
      };
      /** @description Message does not exist */
      404: {
        content: never;
      };
    };
  };
  /** get a specific convo message location */
  retrieveConvoMessageLocation: {
    parameters: {
      path: {
        /** @description Convo id */
        id: number;
        /** @description Convo message id */
        message_id: number;
      };
    };
    responses: {
      /** @description Return convo message record */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
    };
  };
  /** search convo */
  searchConvoMessagesPost: {
    parameters: {
      path: {
        /** @description Convo id */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConvoMessageSearchRequestV1"];
      };
    };
    responses: {
      /** @description List of convo messages */
      200: {
        content: {
          "application/json": components["schemas"]["ConvoMessageSearchResponseV1"];
        };
      };
      /** @description Convo not found */
      404: {
        content: never;
      };
    };
  };
  /** abandon a convo */
  abandonConvo: {
    parameters: {
      path: {
        /** @description Convo id */
        id: number;
      };
    };
    responses: {
      /** @description Convo was abandoned */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Convo not found */
      404: {
        content: never;
      };
    };
  };
  /** invite a user to a convo */
  inviteUserToConvo: {
    parameters: {
      path: {
        /** @description Convo id */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConvoParticipantModelAddV1"][];
      };
    };
    responses: {
      /** @description User was invited */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Convo does not exists */
      404: {
        content: never;
      };
    };
  };
  /** join a convo */
  joinConvo: {
    parameters: {
      path: {
        /** @description Convo id */
        id: number;
      };
    };
    responses: {
      /** @description Join successful */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Convo does not exists */
      404: {
        content: never;
      };
    };
  };
  /** kick a user from a convo */
  kickUserFromConvo: {
    parameters: {
      path: {
        /** @description Convo id */
        id: number;
        /** @description User id */
        user_id: number;
      };
    };
    responses: {
      /** @description User was kicked from convo */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Permission error */
      403: {
        content: never;
      };
      /** @description Convo or user not found */
      404: {
        content: never;
      };
    };
  };
  /** get list of convo participants */
  retrieveConvoParticipants: {
    parameters: {
      path: {
        /** @description Convo id */
        id: number;
      };
    };
    responses: {
      /** @description Return convo participants */
      200: {
        content: {
          "application/json": components["schemas"]["ConvoParticipantModelV1"][];
        };
      };
      /** @description Convo not found */
      404: {
        content: never;
      };
    };
  };
  /** search convo */
  searchConvoPost: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConvoSearchRequestV1"];
      };
    };
    responses: {
      /** @description List of convos */
      200: {
        content: {
          "application/json": components["schemas"]["ConvoSearchResponseV1"];
        };
      };
    };
  };
  /** retrieve all categories and questions */
  retrieveAllFaqCategoriesAndQuestions: {
    responses: {
      /** @description Return category and question records */
      200: {
        content: {
          "application/json": components["schemas"]["FaqCategoryQuestionsModelV1"][];
        };
      };
    };
  };
  /** add a faq category */
  addFaqCategory: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FaqCategoryModelUpdateV1"];
      };
    };
    responses: {
      /** @description Faq category was added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
    };
  };
  /** get a specific category */
  retrieveFaqCategory: {
    parameters: {
      query?: {
        /** @description Output fields in unrendered form for editing */
        unrenderedFields?: boolean;
      };
      path: {
        /** @description Faq category id */
        category_id: number;
      };
    };
    responses: {
      /** @description Return category record */
      200: {
        content: {
          "application/json": components["schemas"]["FaqCategoryModelV1"];
        };
      };
      /** @description Category not found */
      404: {
        content: never;
      };
    };
  };
  /** delete a faq category */
  deleteFaqCategory: {
    parameters: {
      path: {
        /** @description id of faq category */
        category_id: number;
      };
    };
    responses: {
      /** @description Faq Category was deleted */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Faq Category not found */
      404: {
        content: never;
      };
    };
  };
  /** update a faq category */
  updateFaqCategory: {
    parameters: {
      path: {
        /** @description id of faq category */
        category_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FaqCategoryModelUpdateV1"];
      };
    };
    responses: {
      /** @description Faq was updated */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
    };
  };
  /** retrieve all quesitons for a category */
  retrieveAllFaqCategoryQuestions: {
    parameters: {
      path: {
        /** @description Faq category id */
        category_id: number;
      };
    };
    responses: {
      /** @description Return question records */
      200: {
        content: {
          "application/json": components["schemas"]["FaqQuestionModelV1"][];
        };
      };
      /** @description Category not found */
      404: {
        content: never;
      };
    };
  };
  /** add a faq question */
  addFaqQuestion: {
    parameters: {
      path: {
        /** @description id of category to add question to */
        category_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FaqQuestionModelUpdateV1"];
      };
    };
    responses: {
      /** @description Faq question was added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
    };
  };
  /** get a specific question for a category */
  retrieveFaqQuestion: {
    parameters: {
      query?: {
        /** @description Output fields in unrendered form for editing */
        unrenderedFields?: boolean;
      };
      path: {
        /** @description Faq category id */
        category_id: number;
        /** @description Faq question id */
        question_id: number;
      };
    };
    responses: {
      /** @description Return question record */
      200: {
        content: {
          "application/json": components["schemas"]["FaqQuestionModelV1"];
        };
      };
      /** @description Category or question not found */
      404: {
        content: never;
      };
    };
  };
  /** delete an faq */
  deleteFaqQuestion: {
    parameters: {
      path: {
        /** @description Faq category id */
        category_id: number;
        /** @description Faq question id */
        question_id: number;
      };
    };
    responses: {
      /** @description Faq question was deleted */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Faq category or question not found */
      404: {
        content: never;
      };
    };
  };
  /** update a faq question */
  updateFaqQuestion: {
    parameters: {
      path: {
        /** @description Faq category id */
        category_id: number;
        /** @description Faq question id */
        question_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FaqQuestionModelUpdateV1"];
      };
    };
    responses: {
      /** @description Faq was updated */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
    };
  };
  /** reorder faq */
  reorderFaq: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FaqCategoryReorderModelV1"][];
      };
    };
    responses: {
      /** @description Faq was reordered */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
    };
  };
  /** add a forum admin */
  addForumAdmin: {
    parameters: {
      path: {
        /** @description Forum id */
        forum_id: number;
        /** @description User id */
        user_id: number;
      };
    };
    responses: {
      /** @description Forum admin was added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description User not found */
      404: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
    };
  };
  /** remove a forum admin */
  removeForumAdmin: {
    parameters: {
      path: {
        /** @description Forum id */
        forum_id: number;
        /** @description User id */
        user_id: number;
      };
    };
    responses: {
      /** @description Forum admin was removed */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description User not found */
      404: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
    };
  };
  /** retrieve a forum */
  retrieveForum: {
    parameters: {
      query?: {
        /** @description Output fields in unrendered form for editing */
        unrenderedFields?: boolean;
      };
      path: {
        /** @description Forum id */
        forum_id: number;
      };
    };
    responses: {
      /** @description Return topic record */
      200: {
        content: {
          "application/json": components["schemas"]["ForumForumModelV1"];
        };
      };
      /** @description Forum not found */
      404: {
        content: never;
      };
    };
  };
  /** add a forum topic */
  addTopic: {
    parameters: {
      path: {
        /** @description Forum id */
        forum_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ForumTopicModelAddV1"];
      };
    };
    responses: {
      /** @description Forum topic was added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description User is under a warn restriction */
      403: {
        content: never;
      };
    };
  };
  /** show forum admin log */
  showLogPost: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ForumAdminHistorySearchRequestV1"];
      };
    };
    responses: {
      /** @description Return log records */
      200: {
        content: {
          "application/json": components["schemas"]["ForumAdminHistorySearchResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have appropriate role */
      401: {
        content: never;
      };
    };
  };
  /** show forum categories and forums */
  listCategories: {
    responses: {
      /** @description List of forums */
      200: {
        content: {
          "application/json": components["schemas"]["ForumCategoryModelListV1"][];
        };
      };
    };
  };
  /** show popular forums */
  listPopularForums: {
    responses: {
      /** @description List of forums */
      200: {
        content: {
          "application/json": components["schemas"]["ForumForumModelListV1"][];
        };
      };
    };
  };
  /** list posts in topic that I made */
  listPostsByMe: {
    parameters: {
      path: {
        /** @description Forum id */
        forum_id: number;
        /** @description Topic id */
        topic_id: number;
      };
    };
    responses: {
      /** @description Return post id list */
      200: {
        content: {
          "application/json": components["schemas"]["ForumPostByUserResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
    };
  };
  /** list posts in topic */
  listPosts: {
    parameters: {
      path: {
        /** @description Forum id */
        forum_id: number;
        /** @description Topic id */
        topic_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PerPageSearchRequestV1"];
      };
    };
    responses: {
      /** @description Return post records */
      200: {
        content: {
          "application/json": components["schemas"]["ForumPostListResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Forum or topic not found */
      404: {
        content: never;
      };
    };
  };
  /** list topics */
  listTopics: {
    parameters: {
      query?: {
        /** @description Also return the first post of each topic */
        with_first_post?: boolean;
      };
      path: {
        /** @description Forum id */
        forum_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ForumTopicListRequestV1"];
      };
    };
    responses: {
      /** @description Return topic records */
      200: {
        content: {
          "application/json": components["schemas"]["ForumTopicListResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Forum not found */
      404: {
        content: never;
      };
    };
  };
  /** list global topics */
  listGlobalTopics: {
    responses: {
      /** @description Return topic records */
      200: {
        content: {
          "application/json": components["schemas"]["ForumTopicListResponseV1"];
        };
      };
    };
  };
  /** lookup a series to find the forum id */
  lookupSeries: {
    parameters: {
      path: {
        /** @description Series id */
        series_id: number;
      };
    };
    responses: {
      /** @description Series lookup response */
      200: {
        content: {
          "application/json": components["schemas"]["ForumLookupResponseV1"];
        };
      };
      /** @description Series or forum not found */
      404: {
        content: never;
      };
    };
  };
  /** lookup a topic to find the forum id */
  lookupTopic: {
    parameters: {
      path: {
        /** @description Topic id */
        topic_id: number;
      };
    };
    responses: {
      /** @description Topic lookup response */
      200: {
        content: {
          "application/json": components["schemas"]["ForumLookupResponseV1"];
        };
      };
      /** @description Topic not found */
      404: {
        content: never;
      };
    };
  };
  /** lookup a post to find the forum and topic id */
  lookupPost: {
    parameters: {
      path: {
        /** @description Post id */
        post_id: number;
      };
    };
    responses: {
      /** @description Post lookup response */
      200: {
        content: {
          "application/json": components["schemas"]["ForumLookupResponseV1"];
        };
      };
      /** @description Post not found */
      404: {
        content: never;
      };
    };
  };
  /** retrieve temporary poll images */
  retrieveTemporaryPollImages: {
    responses: {
      /** @description Return image records */
      200: {
        content: {
          "application/json": components["schemas"]["ForumPollTempImageModelV1"][];
        };
      };
    };
  };
  /** add a temporary poll image */
  addTemporaryPollImage: {
    requestBody?: {
      content: {
        "multipart/form-data": {
          /**
           * Format: binary
           * @description Image to update
           */
          image?: string;
          /** @description Image caption */
          caption?: string;
        };
      };
    };
    responses: {
      /** @description Image was added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description User is under a warn restriction */
      403: {
        content: never;
      };
    };
  };
  /** update a forum topic poll (if present) */
  updateTopicPoll: {
    parameters: {
      path: {
        /** @description Forum id */
        forum_id: number;
        /** @description Topic id */
        topic_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ForumPollModelUpdateV1"];
      };
    };
    responses: {
      /** @description Topic poll was updated */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
    };
  };
  /** add a vote to a forum poll */
  addPollVote: {
    parameters: {
      path: {
        /** @description Forum id */
        forum_id: number;
        /** @description Topic id */
        topic_id: number;
        /** @description Choice id */
        choice_id: number;
      };
    };
    responses: {
      /** @description Poll vote was added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description User is under a warn restriction */
      403: {
        content: never;
      };
    };
  };
  /** retrieve my vote from the poll */
  retrieveVote: {
    parameters: {
      path: {
        /** @description Forum id */
        forum_id: number;
        /** @description Topic id */
        topic_id: number;
      };
    };
    responses: {
      /** @description Return poll vote record */
      200: {
        content: {
          "application/json": components["schemas"]["ForumPollVoteModelV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Poll or vote not found */
      404: {
        content: never;
      };
    };
  };
  /** retrieve a forum topic */
  retrieveTopic: {
    parameters: {
      query?: {
        /** @description Output fields in unrendered form for editing */
        unrenderedFields?: boolean;
      };
      path: {
        /** @description Forum id */
        forum_id: number;
        /** @description Topic id */
        topic_id: number;
      };
    };
    responses: {
      /** @description Return topic record */
      200: {
        content: {
          "application/json": components["schemas"]["ForumTopicModelV1"];
        };
      };
      /** @description Topic not found */
      404: {
        content: never;
      };
    };
  };
  /** add a forum post */
  addPost: {
    parameters: {
      path: {
        /** @description Forum id */
        forum_id: number;
        /** @description Topic id */
        topic_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ForumPostModelUpdateV1"];
      };
    };
    responses: {
      /** @description Forum post was added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description User is under a warn restriction */
      403: {
        content: never;
      };
    };
  };
  /** delete a topic */
  deleteTopic: {
    parameters: {
      path: {
        /** @description Forum id */
        forum_id: number;
        /** @description Topic id */
        topic_id: number;
      };
    };
    responses: {
      /** @description Topic delete transaction submitted */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
    };
  };
  /** update a forum topic */
  updateTopic: {
    parameters: {
      path: {
        /** @description Forum id */
        forum_id: number;
        /** @description Topic id */
        topic_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ForumTopicModelUpdateV1"];
      };
    };
    responses: {
      /** @description Forum topic was updated */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
    };
  };
  /** retrieve a forum post */
  retrievePost: {
    parameters: {
      query?: {
        /** @description Output fields in unrendered form for editing */
        unrenderedFields?: boolean;
      };
      path: {
        /** @description Forum id */
        forum_id: number;
        /** @description Topic id */
        topic_id: number;
        /** @description Post id */
        post_id: number;
      };
    };
    responses: {
      /** @description Return post record */
      200: {
        content: {
          "application/json": components["schemas"]["ForumPostModelV1"];
        };
      };
      /** @description Post not found */
      404: {
        content: never;
      };
    };
  };
  /** delete a post */
  deletePost: {
    parameters: {
      path: {
        /** @description Forum id */
        forum_id: number;
        /** @description Topic id */
        topic_id: number;
        /** @description Post id */
        post_id: number;
      };
    };
    responses: {
      /** @description Post delete transaction submitted */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
    };
  };
  /** update a forum post */
  updatePost: {
    parameters: {
      path: {
        /** @description Forum id */
        forum_id: number;
        /** @description Topic id */
        topic_id: number;
        /** @description Post id */
        post_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ForumPostModelUpdateV1"];
      };
    };
    responses: {
      /** @description Forum post was updated */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description User is under a warn restriction */
      403: {
        content: never;
      };
    };
  };
  /** report a forum post */
  reportPost: {
    parameters: {
      path: {
        /** @description Forum id */
        forum_id: number;
        /** @description Topic id */
        topic_id: number;
        /** @description Post id */
        post_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ForumPostReportModelUpdateV1"];
      };
    };
    responses: {
      /** @description Forum post was reported */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description User is under a warn restriction */
      403: {
        content: never;
      };
    };
  };
  /** delete a post report */
  deletePostReport: {
    parameters: {
      path: {
        /** @description Forum id */
        forum_id: number;
        /** @description Topic id */
        topic_id: number;
        /** @description Post id */
        post_id: number;
      };
    };
    responses: {
      /** @description Post report was deleted */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
    };
  };
  /** show reported posts */
  listReportedPosts: {
    responses: {
      /** @description Return Reported Posts */
      200: {
        content: {
          "application/json": components["schemas"]["ForumPostReportModelV1"][];
        };
      };
      /** @description User does not have appropriate role */
      401: {
        content: never;
      };
    };
  };
  /** retrieve a forum post location within topic */
  retrievePostLocation: {
    parameters: {
      path: {
        /** @description Forum id */
        forum_id: number;
        /** @description Topic id */
        topic_id: number;
        /** @description Post id */
        post_id: number;
      };
    };
    responses: {
      /** @description Return post record */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Post not found */
      404: {
        content: never;
      };
    };
  };
  /** search forum */
  searchForumPost: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ForumSearchRequestV1"];
      };
    };
    responses: {
      /** @description Return search results */
      200: {
        content: {
          "application/json": components["schemas"]["ForumSearchResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
    };
  };
  /** search specific forum */
  searchSpecificForumPost: {
    parameters: {
      path: {
        /** @description Forum id */
        forum_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ForumSearchRequestV1"];
      };
    };
    responses: {
      /** @description Return search results */
      200: {
        content: {
          "application/json": components["schemas"]["ForumSearchResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
    };
  };
  /** search specific topic */
  searchSpecificTopicPost: {
    parameters: {
      path: {
        /** @description Forum id */
        forum_id: number;
        /** @description Topic id */
        topic_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ForumSearchRequestV1"];
      };
    };
    responses: {
      /** @description Return search results */
      200: {
        content: {
          "application/json": components["schemas"]["ForumSearchResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
    };
  };
  /** show warn history for a user */
  listWarnHistoryForUser: {
    parameters: {
      path: {
        /** @description User id */
        user_id: number;
      };
    };
    responses: {
      /** @description Warn history */
      200: {
        content: {
          "application/json": components["schemas"]["ForumWarnModelV1"][];
        };
      };
      /** @description User does not have appropriate role */
      401: {
        content: never;
      };
    };
  };
  /** gets the current warn status for user */
  getCurrentWarnForUser: {
    parameters: {
      path: {
        /** @description User id */
        user_id: number;
      };
    };
    responses: {
      /** @description Warn status */
      200: {
        content: {
          "application/json": components["schemas"]["ForumWarnModelV1"];
        };
      };
    };
  };
  /** update a user warn level */
  updateUserWarnLevel: {
    parameters: {
      path: {
        /** @description User id */
        user_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ForumWarnModelUpdateV1"];
      };
    };
    responses: {
      /** @description User warn was updated */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Member not found */
      404: {
        content: never;
      };
    };
  };
  /** get genres */
  retrieveGenres: {
    responses: {
      /** @description Return genres */
      200: {
        content: {
          "application/json": components["schemas"]["GenreModelStatsV1"][];
        };
      };
    };
  };
  /** add a genre */
  addGenre: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenreModelUpdateV1"];
      };
    };
    responses: {
      /** @description Genre add transaction submitted */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
    };
  };
  /** get genres */
  retrieveGenreById: {
    parameters: {
      query?: {
        /** @description Output fields in unrendered form for editing */
        unrenderedFields?: boolean;
      };
      path: {
        /** @description Genre id */
        id: number;
      };
    };
    responses: {
      /** @description Return genre */
      200: {
        content: {
          "application/json": components["schemas"]["GenreModelStatsV1"];
        };
      };
    };
  };
  /** delete a genre */
  deleteGenre: {
    parameters: {
      path: {
        /** @description id of genre */
        id: number;
      };
    };
    responses: {
      /** @description Genre was deleted */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Genre not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** update a genre */
  updateGenre: {
    parameters: {
      path: {
        /** @description id of genre */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenreModelUpdateV1"];
      };
    };
    responses: {
      /** @description Genre was updated */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Genre not found */
      404: {
        content: never;
      };
    };
  };
  /** add an group */
  addGroup: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GroupsModelUpdateV1"];
      };
    };
    responses: {
      /** @description Group was added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** get a specific group */
  retrieveGroup: {
    parameters: {
      query?: {
        /** @description Output fields in unrendered form for editing */
        unrenderedFields?: boolean;
      };
      path: {
        /** @description Group id */
        id: number;
      };
    };
    responses: {
      /** @description Return group record */
      200: {
        content: {
          "application/json": components["schemas"]["GroupsModelV1"];
        };
      };
      /** @description Group not found */
      404: {
        content: never;
      };
    };
  };
  /** delete a group */
  deleteGroup: {
    parameters: {
      path: {
        /** @description id of group */
        id: number;
      };
    };
    responses: {
      /** @description Group delete transaction submitted */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Group not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** update an group */
  updateGroup: {
    parameters: {
      path: {
        /** @description id of group */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GroupsModelUpdateV1"];
      };
    };
    responses: {
      /** @description Group was updated */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Group not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** reject and delete a group */
  rejectGroup: {
    parameters: {
      path: {
        /** @description id of group */
        id: number;
      };
    };
    responses: {
      /** @description Group reject transaction submitted */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Group not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** search groups */
  searchGroupsPost: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GroupsSearchRequestV1"];
      };
    };
    responses: {
      /** @description List of groups */
      200: {
        content: {
          "application/json": components["schemas"]["GroupsSearchResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
    };
  };
  /** get the list of series and release frequency for a specific group */
  retrieveGroupSeries: {
    parameters: {
      path: {
        /** @description Group id */
        id: number;
      };
    };
    responses: {
      /** @description Return series list */
      200: {
        content: {
          "application/json": components["schemas"]["GroupsSeriesListResponseV1"];
        };
      };
      /** @description Group not found */
      404: {
        content: never;
      };
    };
  };
  /** retrieve list of user lists */
  retrieveLists: {
    responses: {
      /** @description Return list records */
      200: {
        content: {
          "application/json": components["schemas"]["ListsModelV1"][];
        };
      };
    };
  };
  /** add a custom user list */
  addCustomList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ListsModelUpdateV1"];
      };
    };
    responses: {
      /** @description List was added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** retrieve list metadata and options */
  retrieveListById: {
    parameters: {
      query?: {
        /** @description Output fields in unrendered form for editing */
        unrenderedFields?: boolean;
      };
      path: {
        /** @description List id */
        id: number;
      };
    };
    responses: {
      /** @description Return list record */
      200: {
        content: {
          "application/json": components["schemas"]["ListsModelV1"];
        };
      };
      /** @description List not found */
      404: {
        content: never;
      };
    };
  };
  /** remove a custom list */
  deleteCustomList: {
    parameters: {
      path: {
        /** @description id of list */
        id: number;
      };
    };
    responses: {
      /** @description Custom list was removed */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User list not found */
      404: {
        content: never;
      };
    };
  };
  /** update a user list */
  updateList: {
    parameters: {
      path: {
        /** @description id of list */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ListsModelUpdateV1"];
      };
    };
    responses: {
      /** @description User list was updated */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User list not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** retrieve list of user lists */
  retrievePublicLists: {
    parameters: {
      path: {
        /** @description User id */
        user_id: number;
      };
    };
    responses: {
      /** @description Return list records */
      200: {
        content: {
          "application/json": components["schemas"]["ListsModelV1"][];
        };
      };
    };
  };
  /** retrieve stats for user public lists */
  retrievePublicListStats: {
    parameters: {
      path: {
        /** @description User id */
        user_id: number;
      };
    };
    responses: {
      /** @description Return public list stats records */
      200: {
        content: {
          "application/json": components["schemas"]["ListsPublicStatsModelV1"];
        };
      };
    };
  };
  /** search lists */
  searchPublicListsPost: {
    parameters: {
      path: {
        /** @description User id */
        user_id: number;
        /** @description list id to search */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ListsSearchRequestV1"];
      };
    };
    responses: {
      /** @description Return list records */
      200: {
        content: {
          "application/json": components["schemas"]["ListsPublicSearchResponseV1"];
        };
      };
    };
  };
  /** search lists */
  searchListsPost: {
    parameters: {
      path: {
        /** @description list id to search */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ListsSearchRequestV1"];
      };
    };
    responses: {
      /** @description Return list records */
      200: {
        content: {
          "application/json": components["schemas"]["ListsSearchResponseV1"];
        };
      };
    };
  };
  /** add a series to a list */
  addListSeries: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ListsSeriesModelUpdateV1"][];
      };
    };
    responses: {
      /** @description Series was added */
      200: {
        content: never;
      };
      /** @description Validation or service error */
      400: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** add a list of series to a list */
  addListSeriesBulk: {
    parameters: {
      path: {
        /** @description id of list */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ListsBulkAddModelV1"][];
      };
    };
    responses: {
      /** @description Series were (partially) added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User list not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** remove a series from a list */
  deleteListSeries: {
    requestBody: {
      content: {
        "application/json": number[];
      };
    };
    responses: {
      /** @description Series were removed */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** retrieve list series item */
  retrieveListSeries: {
    parameters: {
      query?: {
        /** @description Output fields in unrendered form for editing */
        unrenderedFields?: boolean;
      };
      path: {
        /** @description Series id */
        series_id: number;
      };
    };
    responses: {
      /** @description Return list series record */
      200: {
        content: {
          "application/json": components["schemas"]["ListsSeriesModelV1"];
        };
      };
      /** @description List or series not found */
      404: {
        content: never;
      };
    };
  };
  /** update a series list item */
  updateListSeries: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ListsSeriesModelUpdateV1"][];
      };
    };
    responses: {
      /** @description Series list items were updated */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** retrieve users who have similar interests based on series */
  retrieveSimilarUsersBySeries: {
    parameters: {
      path: {
        /** @description name of list */
        list_name: "read" | "wish" | "complete" | "unfinished" | "hold";
        /** @description Series id */
        series_id: number;
      };
    };
    responses: {
      /** @description Return similar user records */
      200: {
        content: {
          "application/json": components["schemas"]["ListsSimilarUsersResponseV1"];
        };
      };
      /** @description List or series not found */
      404: {
        content: never;
      };
    };
  };
  /** get the current time */
  time: {
    responses: {
      /** @description Current Time */
      200: {
        content: {
          "application/json": components["schemas"]["TimeV1"];
        };
      };
    };
  };
  /** list online users */
  listOnlineUsers: {
    responses: {
      /** @description Return online users */
      200: {
        content: {
          "application/json": components["schemas"]["MiscOnlineUsersModelV1"];
        };
      };
    };
  };
  /** get the status of a bulk transaction */
  retrieveSlowTransactionStatus: {
    parameters: {
      path: {
        /** @description the transaction id */
        transaction_id: string;
      };
    };
    responses: {
      /** @description Return transaction status */
      200: {
        content: {
          "application/json": components["schemas"]["MiscSlowTransactionStatusResponseV1"];
        };
      };
      /** @description Transaction not found */
      404: {
        content: never;
      };
    };
  };
  /** show various site stats */
  siteStats: {
    responses: {
      /** @description Return site stats */
      200: {
        content: {
          "application/json": components["schemas"]["MiscStatsModelV1"];
        };
      };
    };
  };
  /** get the active poll */
  retrievePoll: {
    responses: {
      /** @description Return poll record */
      200: {
        content: {
          "application/json": components["schemas"]["PollModelV1"];
        };
      };
    };
  };
  /** add a new poll */
  addPoll: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PollModelUpdateV1"];
      };
    };
    responses: {
      /** @description Poll was successfully added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
    };
  };
  /** archive the active poll */
  archivePoll: {
    responses: {
      /** @description Poll was successfully archived */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
    };
  };
  /** get old polls */
  retrieveOldPolls: {
    responses: {
      /** @description Return poll records */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
    };
  };
  /** vote in a poll */
  votePollNoAnswer: {
    responses: {
      /** @description Vote was successfully added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
    };
  };
  /** vote in a poll answer */
  votePollAnswer: {
    parameters: {
      path: {
        /** @description id of answer to vote for */
        answer_id: number;
      };
    };
    responses: {
      /** @description Vote was successfully added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
    };
  };
  /** get information about whether the user has voted */
  retrieveVoteStatus: {
    responses: {
      /** @description Return poll voter status record */
      200: {
        content: {
          "application/json": components["schemas"]["PollVoteStatusModelV1"];
        };
      };
    };
  };
  /** add an publisher */
  addPublisher: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PublishersModelUpdateV1"];
      };
    };
    responses: {
      /** @description Publisher was added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** get a specific publisher */
  retrievePublisher: {
    parameters: {
      query?: {
        /** @description Output fields in unrendered form for editing */
        unrenderedFields?: boolean;
      };
      path: {
        /** @description Publisher id */
        id: number;
      };
    };
    responses: {
      /** @description Return publisher record */
      200: {
        content: {
          "application/json": components["schemas"]["PublishersModelV1"];
        };
      };
      /** @description Publisher not found */
      404: {
        content: never;
      };
    };
  };
  /** delete a publisher */
  deletePublisher: {
    parameters: {
      path: {
        /** @description id of publisher */
        id: number;
      };
    };
    responses: {
      /** @description Publisher delete transaction submitted */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Publisher not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** update a publisher */
  updatePublisher: {
    parameters: {
      path: {
        /** @description id of publisher */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PublishersModelUpdateV1"];
      };
    };
    responses: {
      /** @description Publisher was updated */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Publisher not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** search publishers */
  searchPublishersPost: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PublishersSearchRequestV1"];
      };
    };
    responses: {
      /** @description Return publisher records */
      200: {
        content: {
          "application/json": components["schemas"]["PublishersSearchResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
    };
  };
  /** get the list of series for a specific publisher */
  retrievePublisherSeries: {
    parameters: {
      path: {
        /** @description Publisher id */
        id: number;
      };
    };
    responses: {
      /** @description Return series list */
      200: {
        content: {
          "application/json": components["schemas"]["PublishersSeriesListResponseV1"];
        };
      };
      /** @description Publisher not found */
      404: {
        content: never;
      };
    };
  };
  /** get the list of series for a specific publication */
  retrievePublicationSeries: {
    parameters: {
      query: {
        /** @description Publication name */
        pubname: string;
      };
    };
    responses: {
      /** @description Return series list */
      200: {
        content: {
          "application/json": components["schemas"]["PublishersPublicationResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Publication not found */
      404: {
        content: never;
      };
    };
  };
  /** add an release */
  addRelease: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReleaseModelUpdateV1"][];
      };
    };
    responses: {
      /** @description Release was added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** get a specific release */
  retrieveRelease: {
    parameters: {
      query?: {
        /** @description Output fields in unrendered form for editing */
        unrenderedFields?: boolean;
      };
      path: {
        /** @description Release id */
        id: number;
      };
    };
    responses: {
      /** @description Return release record */
      200: {
        content: {
          "application/json": components["schemas"]["ReleaseModelV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Release not found */
      404: {
        content: never;
      };
    };
  };
  /** delete a release */
  deleteRelease: {
    parameters: {
      path: {
        /** @description id of release */
        id: number;
      };
    };
    responses: {
      /** @description Release was deleted */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Release not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** update an release */
  updateRelease: {
    parameters: {
      path: {
        /** @description id of release */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReleaseModelUpdateV1"];
      };
    };
    responses: {
      /** @description Release was updated */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Release not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** search releases to moderate */
  moderateReleasesPost: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReleaseModerateRequestV1"];
      };
    };
    responses: {
      /** @description Return release records */
      200: {
        content: {
          "application/json": components["schemas"]["ReleaseModerateResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
    };
  };
  /** show releases by day */
  listReleasesByDay: {
    parameters: {
      query?: {
        /** @description Start page */
        page?: number;
        /** @description Include series metadata (if available) */
        include_metadata?: boolean;
      };
    };
    responses: {
      /** @description Return release records */
      200: {
        content: {
          "application/json": components["schemas"]["ReleaseSearchResponseV1"];
        };
      };
    };
  };
  /** releases rss feed */
  releaseRssFeed: {
    responses: {
      /** @description Return release feed */
      200: {
        content: {
          "application/xml": string;
        };
      };
    };
  };
  /** search releases */
  searchReleasesPost: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReleaseSearchRequestV1"];
      };
    };
    responses: {
      /** @description Return release records */
      200: {
        content: {
          "application/json": components["schemas"]["ReleaseSearchResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
    };
  };
  /** add a review */
  addReview: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReviewModelUpdateV1"];
      };
    };
    responses: {
      /** @description Review was added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** add a review comment */
  addReviewComment: {
    parameters: {
      path: {
        /** @description Review id */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReviewCommentModelUpdateV1"];
      };
    };
    responses: {
      /** @description Review comment was added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** get a specific review comment */
  retrieveReviewComment: {
    parameters: {
      query?: {
        /** @description Output fields in unrendered form for editing */
        unrenderedFields?: boolean;
      };
      path: {
        /** @description Review id */
        id: number;
        /** @description Review comment id */
        comment_id: number;
      };
    };
    responses: {
      /** @description Return review comment record */
      200: {
        content: {
          "application/json": components["schemas"]["ReviewCommentModelV1"];
        };
      };
      /** @description Review or comment not found */
      404: {
        content: never;
      };
    };
  };
  /** delete a review comment */
  deleteReviewComment: {
    parameters: {
      path: {
        /** @description id of review */
        id: number;
        /** @description id of review comment */
        comment_id: number;
      };
    };
    responses: {
      /** @description Review comment was deleted */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role or own the review comment */
      401: {
        content: never;
      };
      /** @description Review or comment not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** update a review comment */
  updateReviewComment: {
    parameters: {
      path: {
        /** @description id of review */
        id: number;
        /** @description id of review comment */
        comment_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReviewCommentModelUpdateV1"];
      };
    };
    responses: {
      /** @description Review comment was updated */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role or own the review comment */
      401: {
        content: never;
      };
      /** @description Review or comment not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** moderate review comments */
  reviewCommentsModerationPost: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReviewCommentSearchRequestV1"];
      };
    };
    responses: {
      /** @description Return reviews comment moderation records */
      200: {
        content: {
          "application/json": components["schemas"]["ReviewCommentSearchResponseV1"];
        };
      };
    };
  };
  /** search review comments */
  searchReviewCommentsPost: {
    parameters: {
      path: {
        /** @description Review id */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReviewCommentSearchRequestV1"];
      };
    };
    responses: {
      /** @description Return review comment records */
      200: {
        content: {
          "application/json": components["schemas"]["ReviewCommentSearchResponseV1"];
        };
      };
    };
  };
  /** get a specific review */
  retrieveReview: {
    parameters: {
      query?: {
        /** @description Output fields in unrendered form for editing */
        unrenderedFields?: boolean;
      };
      path: {
        /** @description Review id */
        id: number;
      };
    };
    responses: {
      /** @description Return review record */
      200: {
        content: {
          "application/json": components["schemas"]["ReviewModelV1"];
        };
      };
      /** @description Review not found */
      404: {
        content: never;
      };
    };
  };
  /** delete a review */
  deleteReview: {
    parameters: {
      path: {
        /** @description id of review */
        id: number;
      };
    };
    responses: {
      /** @description Review was deleted */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Review not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** update a review */
  updateReview: {
    parameters: {
      path: {
        /** @description id of review */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReviewModelUpdateV1"];
      };
    };
    responses: {
      /** @description Review was updated */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role or own the review */
      401: {
        content: never;
      };
      /** @description Review not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** search reviews */
  searchReviewsPost: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ReviewSearchRequestV1"];
      };
    };
    responses: {
      /** @description Return review records */
      200: {
        content: {
          "application/json": components["schemas"]["ReviewSearchResponseV1"];
        };
      };
    };
  };
  /** add an series */
  addSeries: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SeriesModelUpdateV1"];
      };
    };
    responses: {
      /** @description Series was added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** combine two series categories */
  combineSeriesCategories: {
    parameters: {
      path: {
        /** @description id of series */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SeriesCategoryUpdateModelV1"];
      };
    };
    responses: {
      /** @description Series categories were combined */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Series or category not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** deletes a series category */
  deleteSeriesCategory: {
    parameters: {
      path: {
        /** @description id of series */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CategoriesModelUpdateV1"];
      };
    };
    responses: {
      /** @description Series category was removed */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Series or category not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** renames a series category */
  renameSeriesCategory: {
    parameters: {
      path: {
        /** @description id of series */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SeriesCategoryUpdateModelV1"];
      };
    };
    responses: {
      /** @description Series category was renamed */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Series or category not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** get category votes for the current user */
  retrieveSeriesCategoryVotes: {
    parameters: {
      path: {
        /** @description Series id */
        id: number;
      };
    };
    responses: {
      /** @description Return vote records */
      200: {
        content: {
          "application/json": components["schemas"]["SeriesCategoryVoteModelV1"][];
        };
      };
    };
  };
  /** add a vote for a category on a series */
  addSeriesCategoryVote: {
    parameters: {
      path: {
        /** @description id of series */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SeriesCategoryVoteModelV1"];
      };
    };
    responses: {
      /** @description Series category vote was added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Series not found */
      404: {
        content: never;
      };
    };
  };
  /** remove series category vote for user */
  removeSeriesCategoryVote: {
    parameters: {
      path: {
        /** @description id of series */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SeriesCategoryVoteDeleteModelV1"];
      };
    };
    responses: {
      /** @description Series category vote was removed */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Series or comment not found */
      404: {
        content: never;
      };
    };
  };
  /** add a series comment */
  addSeriesComment: {
    parameters: {
      path: {
        /** @description id of series */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SeriesCommentModelUpdateV1"];
      };
    };
    responses: {
      /** @description Series comment was added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** get a specific series comment */
  retrieveSeriesComment: {
    parameters: {
      query?: {
        /** @description Output fields in unrendered form for editing */
        unrenderedFields?: boolean;
      };
      path: {
        /** @description Series id */
        id: number;
        /** @description Series comment id */
        comment_id: number;
      };
    };
    responses: {
      /** @description Return series comment record */
      200: {
        content: {
          "application/json": components["schemas"]["SeriesCommentModelV1"];
        };
      };
      /** @description Series or comment not found */
      404: {
        content: never;
      };
    };
  };
  /** delete a series comment */
  deleteSeriesComment: {
    parameters: {
      path: {
        /** @description id of series */
        id: number;
        /** @description id of series comment */
        comment_id: number;
      };
    };
    responses: {
      /** @description Series comment was updated */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role or own the series comment */
      401: {
        content: never;
      };
      /** @description Series or comment not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** update a series comment */
  updateSeriesComment: {
    parameters: {
      path: {
        /** @description id of series */
        id: number;
        /** @description id of series comment */
        comment_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SeriesCommentModelUpdateV1"];
      };
    };
    responses: {
      /** @description Series comment was updated */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role or own the series comment */
      401: {
        content: never;
      };
      /** @description Series or comment not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** moderate series comments */
  seriesCommentsModerationPost: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SeriesCommentSearchRequestV1"];
      };
    };
    responses: {
      /** @description Return series comment moderation records */
      200: {
        content: {
          "application/json": components["schemas"]["SeriesCommentModerationResponseV1"];
        };
      };
    };
  };
  /** report a series comment */
  reportSeriesComment: {
    parameters: {
      path: {
        /** @description id of series */
        id: number;
        /** @description id of series comment */
        comment_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SeriesCommentReportModelV1"];
      };
    };
    responses: {
      /** @description Series comment was reported */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Series or comment not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** get my series comment */
  retrieveMySeriesComment: {
    parameters: {
      query?: {
        /** @description Output fields in unrendered form for editing */
        unrenderedFields?: boolean;
      };
      path: {
        /** @description Series id */
        id: number;
      };
    };
    responses: {
      /** @description Return series comment record */
      200: {
        content: {
          "application/json": components["schemas"]["SeriesCommentModelV1"];
        };
      };
      /** @description Series or comment not found */
      404: {
        content: never;
      };
    };
  };
  /** get a specific series comment location */
  retrieveSeriesCommentLocation: {
    parameters: {
      path: {
        /** @description Series id */
        id: number;
        /** @description Series comment id */
        comment_id: number;
      };
    };
    responses: {
      /** @description Return series comment location */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
    };
  };
  /** search series comments */
  searchSeriesCommentsPost: {
    parameters: {
      path: {
        /** @description Series id */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SeriesCommentSearchRequestV1"];
      };
    };
    responses: {
      /** @description Return series comment records */
      200: {
        content: {
          "application/json": components["schemas"]["SeriesCommentSearchResponseV1"];
        };
      };
    };
  };
  /** set usefulness of a series comment */
  addSeriesCommentUsefulFlag: {
    parameters: {
      path: {
        /** @description id of series */
        id: number;
        /** @description id of series comment */
        comment_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SeriesCommentUsefulModelV1"];
      };
    };
    responses: {
      /** @description Series comment useful was added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Series or comment not found */
      404: {
        content: never;
      };
    };
  };
  /** remove usefulness of a series comment */
  removeSeriesCommentUsefulFlag: {
    parameters: {
      path: {
        /** @description id of series */
        id: number;
        /** @description id of series comment */
        comment_id: number;
      };
    };
    responses: {
      /** @description Series comment useful was deleted */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Series or comment not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** get a specific series */
  retrieveSeries: {
    parameters: {
      query?: {
        /** @description Output fields in unrendered form for editing */
        unrenderedFields?: boolean;
      };
      path: {
        /** @description Series id */
        id: number;
      };
    };
    responses: {
      /** @description Return series record */
      200: {
        content: {
          "application/json": components["schemas"]["SeriesModelV1"];
        };
      };
      /** @description Series not found */
      404: {
        content: never;
      };
    };
  };
  /** delete a series */
  deleteSeries: {
    parameters: {
      path: {
        /** @description id of series */
        id: number;
      };
    };
    responses: {
      /** @description Series was deleted */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Series not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** update an series */
  updateSeries: {
    parameters: {
      path: {
        /** @description id of series */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SeriesModelUpdateV1"];
      };
    };
    responses: {
      /** @description Series was updated */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Field is locked */
      403: {
        content: never;
      };
      /** @description Series not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** get the list of groups scanlating a specific series */
  retrieveSeriesGroups: {
    parameters: {
      path: {
        /** @description Series id */
        id: number;
      };
    };
    responses: {
      /** @description Return series list */
      200: {
        content: {
          "application/json": components["schemas"]["SeriesGroupListResponseV1"];
        };
      };
      /** @description Series not found */
      404: {
        content: never;
      };
    };
  };
  /** search series history */
  searchSeriesHistoryPost: {
    parameters: {
      path: {
        /** @description Series id */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PerPageSearchRequestV1"];
      };
    };
    responses: {
      /** @description Return series records */
      200: {
        content: {
          "application/json": components["schemas"]["SeriesHistorySearchResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
    };
  };
  /** get a specific series lock */
  retrieveSeriesLocks: {
    parameters: {
      path: {
        /** @description Series id */
        id: number;
      };
    };
    responses: {
      /** @description Return series lock records */
      200: {
        content: {
          "application/json": components["schemas"]["SeriesLockModelV1"][];
        };
      };
      /** @description Series not found */
      404: {
        content: never;
      };
    };
  };
  /** lock a field of an series */
  lockSeriesField: {
    parameters: {
      path: {
        /** @description id of series */
        id: number;
        /** @description field name */
        item: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SeriesLockModelUpdateV1"];
      };
    };
    responses: {
      /** @description Field was locked */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Series not found */
      404: {
        content: never;
      };
      /** @description Field is already locked */
      409: {
        content: never;
      };
    };
  };
  /** unlock a field of an series */
  unlockSeriesField: {
    parameters: {
      path: {
        /** @description id of series */
        id: number;
        /** @description field name */
        item: string;
      };
    };
    responses: {
      /** @description Field was unlocked */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Series not found */
      404: {
        content: never;
      };
      /** @description Field is already unlocked */
      409: {
        content: never;
      };
    };
  };
  /** get a specific series rank location */
  retrieveSeriesRankLocation: {
    parameters: {
      path: {
        /** @description Series id */
        id: number;
        /** @description Stat type */
        type: string;
      };
    };
    responses: {
      /** @description Return series rank location */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
    };
  };
  /** get a specific series rating for a user */
  retrieveUserSeriesRating: {
    parameters: {
      path: {
        /** @description Series id */
        id: number;
      };
    };
    responses: {
      /** @description Return series rating records */
      200: {
        content: {
          "application/json": components["schemas"]["SeriesRatingModelV1"];
        };
      };
      /** @description Series not found */
      404: {
        content: never;
      };
    };
  };
  /** update the user rating for a series */
  updateUserSeriesRating: {
    parameters: {
      path: {
        /** @description id of series */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SeriesRatingModelV1"];
      };
    };
    responses: {
      /** @description Series rating was updated */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Series not found */
      404: {
        content: never;
      };
    };
  };
  /** delete a series rating for a user */
  deleteUserSeriesRating: {
    parameters: {
      path: {
        /** @description id of series */
        id: number;
      };
    };
    responses: {
      /** @description Series rating was deleted */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Series not found */
      404: {
        content: never;
      };
    };
  };
  /** get a the series rating rainbow */
  retrieveSeriesRatingRainbow: {
    parameters: {
      path: {
        /** @description Series id */
        id: number;
      };
    };
    responses: {
      /** @description Return series rating records */
      200: {
        content: {
          "application/json": components["schemas"]["SeriesRatingRainbowModelV1"];
        };
      };
      /** @description Series not found */
      404: {
        content: never;
      };
    };
  };
  /** releases rss feed for a specific series */
  seriesReleaseRssFeed: {
    parameters: {
      path: {
        /** @description id of series */
        id: number;
      };
    };
    responses: {
      /** @description Return release feed */
      200: {
        content: {
          "application/xml": string;
        };
      };
    };
  };
  /** search series */
  searchSeriesPost: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SeriesSearchRequestV1"];
      };
    };
    responses: {
      /** @description Return series records */
      200: {
        content: {
          "application/json": components["schemas"]["SeriesSearchResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
    };
  };
  /** update the image of an series */
  updateSeriesImage: {
    parameters: {
      path: {
        /** @description id of series */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          /**
           * Format: binary
           * @description Image to update
           */
          image?: string;
        };
      };
    };
    responses: {
      /** @description Image was updated */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Field is locked */
      403: {
        content: never;
      };
      /** @description Series not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** delete the image of an series */
  deleteSeriesImage: {
    parameters: {
      path: {
        /** @description id of series */
        id: number;
      };
    };
    responses: {
      /** @description Image was deleted */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Series not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** get user group */
  retrieveUserGroupById: {
    parameters: {
      query?: {
        /** @description Output fields in unrendered form for editing */
        unrenderedFields?: boolean;
      };
      path: {
        /** @description user group id */
        id: string;
      };
    };
    responses: {
      /** @description Return user group */
      200: {
        content: {
          "application/json": components["schemas"]["UserGroupModelV1"];
        };
      };
    };
  };
  /** add or update a user group */
  addOrUpdateUserGroup: {
    parameters: {
      path: {
        /** @description user group id */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserGroupModelUpdateV1"];
      };
    };
    responses: {
      /** @description user group was added or updated */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
    };
  };
  /** delete a user group */
  deleteUserGroup: {
    parameters: {
      path: {
        /** @description id of user group */
        id: string;
      };
    };
    responses: {
      /** @description User group was deleted */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description user group not found */
      404: {
        content: never;
      };
    };
  };
  /** get user groups */
  retrieveUserGroups: {
    responses: {
      /** @description Return User Groups */
      200: {
        content: {
          "application/json": components["schemas"]["UserGroupModelV1"][];
        };
      };
    };
  };
  /** add a member */
  addMember: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserModelUpdateV1"];
      };
    };
    responses: {
      /** @description Member was added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** search change requests for a specific user */
  searchMemberChangeRequests: {
    parameters: {
      query?: {
        /** @description Start page */
        page?: number;
        /** @description Items per page */
        perpage?: number;
        /** @description order by field */
        orderby?: "score" | "time";
        /** @description Direction of results */
        asc?: "asc" | "desc";
      };
      path: {
        /** @description Member id */
        id: number;
      };
    };
    responses: {
      /** @description Return member change requests */
      200: {
        content: {
          "application/json": components["schemas"]["UserChangeRequestSearchResponseV1"];
        };
      };
      /** @description User does not have permission */
      403: {
        content: never;
      };
      /** @description Record not found */
      404: {
        content: never;
      };
    };
  };
  /** add a change request */
  addMemberChangeRequest: {
    parameters: {
      path: {
        /** @description Member id */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserChangeRequestModelUpdateV1"];
      };
    };
    responses: {
      /** @description Change request was added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description User does not have permission */
      403: {
        content: never;
      };
      /** @description Record not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** get change requests for a specific user */
  retrieveMemberChangeRequest: {
    parameters: {
      path: {
        /** @description Member id */
        id: number;
        /** @description Change request id */
        request_id: number;
      };
    };
    responses: {
      /** @description Return member change requests */
      200: {
        content: {
          "application/json": components["schemas"]["UserChangeRequestModelV1"];
        };
      };
      /** @description User does not have permission */
      403: {
        content: never;
      };
      /** @description Record not found */
      404: {
        content: never;
      };
    };
  };
  /** add a change request */
  deleteMemberChangeRequest: {
    parameters: {
      path: {
        /** @description Member id */
        id: number;
        /** @description Change request id */
        request_id: number;
      };
    };
    responses: {
      /** @description Change request was deleted */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description User does not have permission */
      403: {
        content: never;
      };
      /** @description Record not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** update a change request */
  updateMemberChangeRequest: {
    parameters: {
      path: {
        /** @description Member id */
        id: number;
        /** @description Change request id */
        request_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserChangeRequestModelUpdateV1"];
      };
    };
    responses: {
      /** @description Change request was updated */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description User does not have permission */
      403: {
        content: never;
      };
      /** @description Record not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** get a specific members */
  retrieveMember: {
    parameters: {
      query?: {
        /** @description Output fields in unrendered form for editing */
        unrenderedFields?: boolean;
      };
      path: {
        /** @description Member id */
        id: number;
      };
    };
    responses: {
      /** @description Return user record */
      200: {
        content: {
          "application/json": components["schemas"]["UserModelV1"];
        };
      };
      /** @description Member not found */
      404: {
        content: never;
      };
    };
  };
  /** delete a member */
  deleteMember: {
    parameters: {
      path: {
        /** @description Member id */
        id: number;
      };
    };
    responses: {
      /** @description Member was deleted */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Member not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** update a member */
  updateMember: {
    parameters: {
      path: {
        /** @description Member id */
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserModelUpdateV1"];
      };
    };
    responses: {
      /** @description Member was updated */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description User does not have permission */
      403: {
        content: never;
      };
      /** @description Member not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** get genre filters for a specific user */
  retrieveMemberGenreFilters: {
    parameters: {
      path: {
        /** @description Member id */
        id: number;
      };
    };
    responses: {
      /** @description Return member filter records */
      200: {
        content: {
          "application/json": components["schemas"]["UserGenreFilterModelV1"][];
        };
      };
      /** @description User does not have permission */
      403: {
        content: never;
      };
      /** @description Member not found */
      404: {
        content: never;
      };
    };
  };
  /** filter a genre for a user */
  addMemberGenreFilter: {
    parameters: {
      path: {
        /** @description id of member */
        id: number;
        /** @description genre id */
        genre_id: number;
      };
    };
    responses: {
      /** @description Filter was added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Service or validation error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Member does not have correct role */
      401: {
        content: never;
      };
      /** @description User does not have permission */
      403: {
        content: never;
      };
      /** @description Member not found */
      404: {
        content: never;
      };
    };
  };
  /** remove a filter for a genre for a user */
  removeMemberGenreFilter: {
    parameters: {
      path: {
        /** @description id of member */
        id: number;
        /** @description genre id */
        genre_id: number;
      };
    };
    responses: {
      /** @description Filter was removed */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Service or validation error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Member does not have correct role */
      401: {
        content: never;
      };
      /** @description User does not have permission */
      403: {
        content: never;
      };
      /** @description Member not found */
      404: {
        content: never;
      };
    };
  };
  /** get highlights for a specific user */
  retrieveMemberGenreHighlights: {
    parameters: {
      path: {
        /** @description Member id */
        id: number;
      };
    };
    responses: {
      /** @description Return member highlight records */
      200: {
        content: {
          "application/json": components["schemas"]["UserGenreHighlightModelV1"][];
        };
      };
      /** @description User does not have permission */
      403: {
        content: never;
      };
      /** @description Member not found */
      404: {
        content: never;
      };
    };
  };
  /** highlight a genre for a user */
  addMemberGenreHighlight: {
    parameters: {
      path: {
        /** @description id of member */
        id: number;
        /** @description genre id */
        genre_id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserGenreHighlightModelUpdateV1"];
      };
    };
    responses: {
      /** @description Highlight was added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Service or validation error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Member does not have correct role */
      401: {
        content: never;
      };
      /** @description User does not have permission */
      403: {
        content: never;
      };
      /** @description Member not found */
      404: {
        content: never;
      };
    };
  };
  /** remove a highlight for a genre for a user */
  removeMemberGenreHighlight: {
    parameters: {
      path: {
        /** @description id of member */
        id: number;
        /** @description genre id */
        genre_id: number;
      };
    };
    responses: {
      /** @description Highlight was removed */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Service or validation error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Member does not have correct role */
      401: {
        content: never;
      };
      /** @description User does not have permission */
      403: {
        content: never;
      };
      /** @description Member not found */
      404: {
        content: never;
      };
    };
  };
  /** reset genre highlights and filters for a user */
  resetGenreSettings: {
    parameters: {
      path: {
        /** @description id of member */
        id: number;
      };
    };
    responses: {
      /** @description Filters and highlights were reset */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Member does not have correct role */
      401: {
        content: never;
      };
      /** @description User does not have permission */
      403: {
        content: never;
      };
      /** @description Member not found */
      404: {
        content: never;
      };
    };
  };
  /** get group filters for a specific user */
  retrieveMemberGroupFilters: {
    parameters: {
      path: {
        /** @description Member id */
        id: number;
      };
    };
    responses: {
      /** @description Return member filter records */
      200: {
        content: {
          "application/json": components["schemas"]["UserGroupFilterModelV1"][];
        };
      };
      /** @description User does not have permission */
      403: {
        content: never;
      };
      /** @description Member not found */
      404: {
        content: never;
      };
    };
  };
  /** filter a group for a user */
  addUserGroupFilter: {
    parameters: {
      path: {
        /** @description id of member */
        id: number;
        /** @description group id */
        group_id: number;
      };
    };
    responses: {
      /** @description Filter was added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Service or validation error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Member does not have correct role */
      401: {
        content: never;
      };
      /** @description User does not have permission */
      403: {
        content: never;
      };
      /** @description Member not found */
      404: {
        content: never;
      };
    };
  };
  /** remove a filter for a group for a user */
  removeUserGroupFilter: {
    parameters: {
      path: {
        /** @description id of member */
        id: number;
        /** @description group id */
        group_id: number;
      };
    };
    responses: {
      /** @description Filter was removed */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Service or validation error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Member does not have correct role */
      401: {
        content: never;
      };
      /** @description User does not have permission */
      403: {
        content: never;
      };
      /** @description Member not found */
      404: {
        content: never;
      };
    };
  };
  /** get avatars for a specific user */
  retrieveMemberAvatars: {
    parameters: {
      path: {
        /** @description Member id */
        id: number;
      };
    };
    responses: {
      /** @description Return user record */
      200: {
        content: {
          "application/json": components["schemas"]["AvatarModelV1"][];
        };
      };
      /** @description Member not found */
      404: {
        content: never;
      };
    };
  };
  /** search members */
  searchMembersPost: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserSearchRequestV1"];
      };
    };
    responses: {
      /** @description Return user records */
      200: {
        content: {
          "application/json": components["schemas"]["UserSearchResponseV1"];
        };
      };
    };
  };
  /** get topic subscriptions for a specific user */
  retrieveMemberTopicSubscriptions: {
    parameters: {
      path: {
        /** @description Member id */
        id: number;
      };
    };
    responses: {
      /** @description Return member topic subscriptions */
      200: {
        content: {
          "application/json": components["schemas"]["UserSubscribedTopicModelV1"][];
        };
      };
      /** @description User does not have permission */
      403: {
        content: never;
      };
      /** @description Member not found */
      404: {
        content: never;
      };
    };
  };
  /** get a subscription to a specific topic for a user */
  retrieveMemberTopicSubscription: {
    parameters: {
      path: {
        /** @description Member id */
        id: number;
        /** @description Topic id */
        topic_id: number;
      };
    };
    responses: {
      /** @description Return member topic subscriptions */
      200: {
        content: {
          "application/json": components["schemas"]["UserSubscribedTopicModelV1"];
        };
      };
      /** @description User does not have permission */
      403: {
        content: never;
      };
      /** @description Member or subscription not found */
      404: {
        content: never;
      };
    };
  };
  /** add a topic subscription for a user */
  addUserTopicSubscription: {
    parameters: {
      path: {
        /** @description id of member */
        id: number;
        /** @description topic id */
        topic_id: number;
      };
    };
    responses: {
      /** @description Topic Subscription was added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Service or validation error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Member does not have correct role */
      401: {
        content: never;
      };
      /** @description User does not have permission */
      403: {
        content: never;
      };
      /** @description Member or Forum/Topic not found */
      404: {
        content: never;
      };
    };
  };
  /** remove a topic subscription for a user */
  removeUserTopicSubscription: {
    parameters: {
      path: {
        /** @description id of member */
        id: number;
        /** @description topic id */
        topic_id: number;
      };
    };
    responses: {
      /** @description Topic subscription was removed */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Service or validation error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Member does not have correct role */
      401: {
        content: never;
      };
      /** @description User does not have permission */
      403: {
        content: never;
      };
      /** @description Member not found */
      404: {
        content: never;
      };
    };
  };
  /** add a new member avatar */
  addMemberAvatar: {
    parameters: {
      path: {
        /** @description Member id */
        id: number;
      };
    };
    requestBody?: {
      content: {
        "multipart/form-data": {
          /**
           * Format: binary
           * @description Image to update
           */
          image?: string;
          /** @description Title of the new avatar */
          title?: string;
        };
      };
    };
    responses: {
      /** @description Image was added */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description User does not have permission */
      403: {
        content: never;
      };
      /** @description Member not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** delete a member avatar */
  deleteMemberAvatar: {
    parameters: {
      path: {
        /** @description Member id */
        id: number;
        /** @description Avatar id */
        avatar_id: number;
      };
    };
    responses: {
      /** @description Avatar was deleted */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description User does not have permission */
      403: {
        content: never;
      };
      /** @description Member or avatar not found */
      404: {
        content: never;
      };
      /** @description Five second update delay */
      412: {
        content: never;
      };
    };
  };
  /** upgrade a member */
  approveMemberUpgrade: {
    parameters: {
      path: {
        /** @description Member id */
        id: number;
      };
    };
    responses: {
      /** @description Member was upgraded */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Member not found */
      404: {
        content: never;
      };
    };
  };
  /** reject a member upgrade */
  rejectMemberUpgrade: {
    parameters: {
      path: {
        /** @description Member id */
        id: number;
      };
    };
    responses: {
      /** @description Member upgrade was rejected */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description Validation or service error */
      400: {
        content: {
          "application/json": components["schemas"]["ApiResponseV1"];
        };
      };
      /** @description User does not have correct role */
      401: {
        content: never;
      };
      /** @description Member not found */
      404: {
        content: never;
      };
    };
  };
}
